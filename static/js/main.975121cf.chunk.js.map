{"version":3,"sources":["Utilities.js","services/ZoneService.js","map/VoteMap.js","SockJsClient.js","App.js","results/Candidates.js","results/Littlenogroup.js","results/Biggerpartygroup.js","results/Bigger.js","results/Little.js","images/logo.ico","serviceWorker.js","errors/ErrorBoundary.js","index.js"],"names":["getVotingPaperById","value","result","config","votingPapers","forEach","votingPaper","id","getVotingPaperByZone","zone","getZoneById","sites","i","length","site","zones","getZoneIdsToExpand","getFirstZoneId","getComponentById","groups","group","parties","party","candidates","candidate","getVotesById","votes","component","electors","getPercent","voteComponent","voteVotingPaper","totalElectors","blankPapers","toFixed","isNaN","parseFloat","getBlankPapers","list","filter","getUpdateDate","options","year","month","day","hour","minute","affluence","Date","toLocaleDateString","language","getTitle","level","e","name","defaultMessage","ZoneService","url","process","axios","get","map","key","data","label","icon","selectable","f","children","convert","sort","join","VoteMap","state","tabvotes","zoneSelect","React","createRef","zoneService","allVotingPapers","this","props","app","getTreeZones","zonesFrom","then","expandedKeys","setState","votingPaperByZone","current","ballots","history","ref","className","model","activeIndex","activeTabVoteIndex","onTabChange","activeTabVote","index","chooseZone","type","onChange","items","placeholder","Component","SockJsClient","_initStompClient","client","Stomp","over","SockJS","heartbeat","outgoing","incoming","Object","keys","includes","heartbeatIncoming","heartbeatOutgoing","debug","_cleanUp","connected","retryCount","subscriptions","clear","_log","msg","console","log","_subscribe","topic","has","sub","subscribe","onMessage","_processMessage","body","headers","destination","subscribeHeaders","set","msgBody","JSON","parse","_unsubscribe","unsubscribe","delete","_connect","connect","topics","onConnect","error","onConnectFailure","stack","onDisconnect","autoReconnect","explicitDisconnect","_timeoutId","setTimeout","getRetryInterval","disconnect","clearTimeout","subid","sendMessage","opt_headers","Error","send","Map","nextProps","nextState","Lo","difference","newTopic","oldTopic","defaultProps","count","Candidates","rowData","image","src","alt","style","width","left","top","position","dataTable","numberVotes","jsonValue","lists","sortField","sortOrder","scrollable","scrollHeight","field","candidateTemplate","header","columns","values","toLocaleTimeString","push","realTimeVotes","votings","bottom","renderDataTable","Littlenogroup","showCandidates","selectedParty","voting_url","response","catch","partyTemplate","bind","candidatesTemplate","onClick","realTimeVotingPapers","progressSpinner","vote","votingValues","blankPapersValues","updateDate","updateDateValues","footer","percent","visible","modal","onHide","renderModalHeader","Biggerpartygroup","expandedRows","listsTemplate","rowExpansionTemplate","sumValue","sumPercent","sumPercentBallots","colSpan","footerColumnGroup","namePercent","images","onRowToggle","expander","Bigger","Little","App","activeItem","activeItemIndex","voteMap","results","tabs","ReactDOM","findDOMNode","querySelectorAll","click","changedItem","subtitle","boxLive","title","logo","href","paddingRight","isLocalhost","Boolean","window","location","hostname","match","register","navigator","URL","origin","addEventListener","swUrl","fetch","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ErrorBoundary","whiteSpace","toString","errorInfo","componentStack","messages","messages_it","split","voting_papers_url","search","startsWith","render","document","getElementById","papers","locale"],"mappings":"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","file":"static/js/main.975121cf.chunk.js","sourcesContent":["import React from 'react'\nimport { config } from './App'\nimport ReactDOM from 'react-dom'\nimport { language } from './index'\nimport { FormattedMessage } from 'react-intl'\n\nexport const getTabs = (component, style) => {\n    return ReactDOM.findDOMNode(component).querySelectorAll(style + ' .p-menuitem-link')\n}\n\nexport const getVotingPaperById = (value) => {\n\tif (value) {\n\t\tlet result = ''\n    \tconfig.votingPapers.forEach(votingPaper => {\n\t\t\tif (votingPaper.id === value.id)\n\t\t\t\tresult = votingPaper\n\t\t})\n\t\treturn result\n\t} else return ''\n}\n\nexport const getVotingPaperByZone = (value) => {\n\tif (value) {\n\t\tlet result = ''\n    \tconfig.votingPapers.forEach(votingPaper => {\n\t\t\tif (votingPaper.zone &&  votingPaper.zone === value)\n\t\t\t\tresult = votingPaper\n\t\t})\n\t\treturn result\n\t} else return ''\n}\n\nexport const getZoneById = (result, value, sites) => {\n\tfor (let i = 0; i < sites.length; i++) {\n\t\tlet site = sites[i]\n\t\tif (site.id === value || !value)\n\t\t\tresult[0] = site\n\t\telse\n\t\t\tgetZoneById(result, value, site.zones)\n\t}\n}\n\nexport const getZoneIdsToExpand = (result, sites) => {\n\tfor (let i = 0; i < sites.length; i++) {\n\t\tlet site = sites[i]\n\t\tif (site.zones.length > 0)\n\t\t\tresult[site.id] = true\n\t\tgetZoneIdsToExpand(result, site.zones)\n\t}\n}\n\nexport const getFirstZoneId = (sites) => {\n\tfor (let i = 0; i < sites.length; i++) {\n\t\tlet site = sites[i]\n\t\tif (site.zones.length === 0)\n\t\t\treturn site.id\n\t\telse\n\t\t\treturn getFirstZoneId(site.zones)\n\t}\n}\n\nexport const getComponentById = (value, votingPaper) => {\n\tlet result\n\tif (votingPaper.id === value)\n\t\tresult = votingPaper\n\telse {\n\t\tif (votingPaper.groups)\n\t\t\tvotingPaper.groups.forEach(group => {\n\t\t\t\tif (group.id === value)\n\t\t\t\t\tresult = group\n\t\t\t\t\telse group.parties.forEach(party => {\n\t\t\t\t\t\tif (party.id === value)\n\t\t\t\t\t\t\tresult = party\n\t\t\t\t\t\telse if (party.candidates)\n\t\t\t\t\t\t\tparty.candidates.forEach(candidate => {\n\t\t\t\t\t\t\t\tif (candidate.id === value)\n\t\t\t\t\t\t\t\t\tresult = candidate\n\t\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t})\n\t\tif (votingPaper.parties)\n\t\t\tvotingPaper.parties.forEach(party => {\n\t\t\t\tif (party.id === value)\n\t\t\t\t\tresult = party\n\t\t\t\telse if (party.candidates) \n\t\t\t\t\tparty.candidates.forEach(candidate => {\n\t\t\t\t\t\tif (candidate.id === value)\n\t\t\t\t\t\t\tresult = candidate\n\t\t\t\t\t})\n\t\t\t})\n\t\t}\n\treturn result\n}\n\nexport const getVotesById = (value, votes) => {\n\tlet result = 0\n\tvotes.votingPapers.forEach(votingPaper => {\n\t\tlet component = getComponentById(value, votingPaper)\n\t\tif (component)\n\t\t\tresult = component.electors\n\t})\n\treturn result\n}\n\nexport const getPercent = (value, votes) => {\n\tlet voteComponent\n\tlet voteVotingPaper\n\tlet result = 0\n\tvotes.votingPapers.forEach(votingPaper => {\n\t\tlet component = getComponentById(value, votingPaper)\n\t\tif (component) {\n\t\t\tvoteComponent = component\n\t\t\tvoteVotingPaper = votingPaper\n\t\t}\n\t})\n\tif (voteComponent) {\n\t\tlet totalElectors = voteVotingPaper.electors - voteVotingPaper.blankPapers\n\t\tresult = (voteComponent.electors / totalElectors * 100).toFixed(2)\n\t\tif (isNaN(result))\n\t\t\tresult = 0\n\t}\n\treturn parseFloat(result)\n}\n\nexport const getBlankPapers = (value, votes) => {\n\tlet list = votes.votingPapers.filter(votingPaper => votingPaper.id === value)\n\tif (list.length > 0)\n\t\treturn list[0].blankPapers\n\telse return 0\n}\n\nexport const getUpdateDate = (votes) => {\n\tlet options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }\n\tif (votes.affluence)\n\t\treturn new Date(votes.affluence).toLocaleDateString(language, options)\n\telse return new Date().toLocaleDateString(language, options)\n}\n\nexport const getTitle = (value) => {\n\tif (value) {\n\t\treturn <FormattedMessage id={'level_' + value.level}>\n\t\t\t\t\t{e => e + ' ' + value.name}\n\t\t\t   </FormattedMessage>\n\t} else return <FormattedMessage id={language} defaultMessage='Great Britain' />\n}","import axios from 'axios';\n\nexport class ZoneService {\n\n    getTreeZones(votingPapers) {\n    \tlet url = process.env.REACT_APP_CITIES_GENERATOR_URL + votingPapers + '?all'\n        return axios.get(url)\n    }\n    \n    convert(zones, votingPapers) {\n    \tlet convertedZones =  zones.map((e) => {\n    \t\treturn {\n    \t\t\t\t\tkey: e.id,\n    \t\t\t\t\tdata: e.id,\n    \t\t\t\t\tlabel: e.name,\n    \t\t\t\t\ticon: 'pi pi-fw pi-cog',\n    \t\t\t\t\tselectable: votingPapers.filter((f) => f.zone === e.id).length > 0,\n    \t\t\t\t\tchildren: this.convert(e.zones, votingPapers)\n    \t\t\t\t}\n    \t})\n    \treturn convertedZones \n    }\n    \n    zonesFrom(votingPapers) {\n    \tlet zones = votingPapers.filter((e) => e.zone).map((f) => f.zone).sort().join()\n    \treturn zones\n    }\n}","import React, { Component } from 'react'\nimport './VoteMap.css'\nimport { FormattedMessage } from 'react-intl'\nimport { getVotingPaperByZone, getZoneById, getZoneIdsToExpand, getFirstZoneId } from '../Utilities'\nimport { TreeSelect } from 'primereact/treeselect'\nimport { ZoneService } from '../services/ZoneService'\nimport { history } from '../index'\nimport { TabMenu } from 'primereact/tabmenu'\n\t\nclass VoteMap extends Component {\n\n\tconstructor() {\n\t\tsuper()\n\n\t\tthis.state = {\n\t\t\tsites: null,\n            tabvotes: [\n            \t{ id: 0, label: <FormattedMessage id='app.tab.ballots' defaultMessage='BALLOTS' /> },\n            \t{ id: 1, label: <FormattedMessage id='app.tab.voters' defaultMessage='VOTERS' /> }\n                ]\n\t\t}\n \t\tthis.zoneSelect = React.createRef()\n        this.zoneService = new ZoneService()\n\t}\n\n    componentDidMount() {\n    \tlet allVotingPapers = this.props.app.props.config.votingPapers\n    \tthis.zoneService.getTreeZones(this.zoneService.zonesFrom(allVotingPapers)).then(data => {\n    \t\tlet expandedKeys = {}\n    \t\tgetZoneIdsToExpand(expandedKeys, data.data.zones)\n    \t\tlet site = getFirstZoneId(data.data.zones)\n        \tthis.setState({ site: site, expandedKeys: expandedKeys, zones: data.data.zones, sites: this.zoneService.convert(data.data.zones, allVotingPapers) })\n\t\t\t\n\t\t\tlet result = []\n\t\t\tgetZoneById(result, site, data.data.zones)\n\t\t\tlet votingPaperByZone = getVotingPaperByZone(site)\n\t\t\tthis.props.app.setState({ votingPaper: votingPaperByZone,\n\t\t\t\t\t\t\t\t\t  zone: result[0] })\n        })\n    }\n\n    componentDidUpdate() {\n\t\tif (this.zoneSelect.current)\n\t\t\tthis.zoneSelect.current.setState({\n\t\t\t\texpandedKeys: this.state.expandedKeys\n\t\t\t})\n    }\n\n\trender() {\n\t\tlet ballots = ''\n    \tif (history) {\n    \t\tballots = <TabMenu ref='tabVotes' className='vote-tabvotes' model={this.state.tabvotes} activeIndex={this.props.app.state.activeTabVoteIndex} onTabChange={(e) => {\n            \t\tthis.props.app.setState({ activeTabVote: e.value, activeTabVoteIndex: e.index })\n            \t\t}\n            \t} />\n    \t}\n    \tlet chooseZone = ''\n    \tif (this.props.votingPaper && (this.props.votingPaper.type === 'bigger' || this.props.votingPaper.type === 'bigger-partygroup'))\n    \t\tchooseZone = <FormattedMessage\n            \t\t\t\tid='app.choosezone'\n            \t\t\t\tdefaultMessage='Choose zone'>\n\t\t\t\t\t\t\t{(chooseZone) => <TreeSelect ref={this.zoneSelect} value={this.state.site} \n\t\t\t\t\t\t\t\t\toptions={this.state.sites} onChange={(e) =>  { this.setState(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsite: e.value\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\tlet result = []\n\t\t\t\t\t\t\t\tgetZoneById(result, e.value, this.state.zones)\n\t\t\t\t\t\t\t\tlet votingPaperByZone = getVotingPaperByZone(e.value)\n\t\t\t\t\t\t\t\tthis.props.app.setState({ votingPaper: votingPaperByZone,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  zone: result[0] })\n\t\t\t\t\t\t\t\tthis.props.app.state.items[0].id = votingPaperByZone.id\n\t\t\t\t\t\t\t\tthis.props.app.state.items[0].label = votingPaperByZone.name\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} filter placeholder={chooseZone[0]}>\n\t\t\t\t\t\t\t</TreeSelect>}\n\t\t\t\t\t\t </FormattedMessage>\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className='p-grid'>\n\t\t\t\t\t<div className='p-col-2'>\n    \t\t\t\t\t{chooseZone}\n\t\t\t\t\t\t{ballots}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default VoteMap","import React from 'react'\nimport SockJS from 'sockjs-client'\nimport Stomp from 'stompjs'\nimport PropTypes from 'prop-types'\nimport Lo from 'lodash'\n\n/**\n * React component for SockJS-client with STOMP messaging protocol.\n *\n * @version 4.1.0\n * @author [lahsivjar] (https://github.com/lahsivjar)\n * @see {@link https://stomp.github.io/|STOMP}\n * @see {@link https://github.com/sockjs/sockjs-client|StompJS}\n */\nclass SockJsClient extends React.Component {\n  static defaultProps = {\n    onConnect: () => {},\n    onDisconnect: () => {},\n    getRetryInterval: (count) => { return 1000 * count },\n    options: {},\n    headers: {},\n    subscribeHeaders: {},\n    autoReconnect: true,\n    debug: false,\n    heartbeat: 10000\n  }\n\n  static propTypes = {\n    /**\n     * HTTP URL of the endpoint to connect.\n     */\n    url: PropTypes.string.isRequired,\n    /**\n     * Additional options to pass to the underlying SockJS constructor.\n     *\n     * @see [SockJS-options](https://github.com/sockjs/sockjs-client#sockjs-client-api)\n     */\n    options: PropTypes.object,\n    /**\n     * Array of topics to subscribe to.\n     */\n    topics: PropTypes.array.isRequired,\n    /**\n     * Callback after connection is established.\n     */\n    onConnect: PropTypes.func,\n    /**\n     * Callback after connection is lost.\n     */\n    onDisconnect: PropTypes.func,\n    /**\n     * Gets called to find the time interval for next retry. Defaults to a function returing retryCount seconds.\n     *\n     * @param {number} retryCount number of retries for the current disconnect\n     */\n    getRetryInterval: PropTypes.func,\n    /**\n     * Callback when a message is recieved.\n     *\n     * @param {(string|Object)} msg message received from server, if JSON format then object\n     * @param {string} topic the topic on which the message was received\n     */\n    onMessage: PropTypes.func.isRequired,\n    /**\n     * Headers that will be passed to the server or broker with STOMP's connection frame.\n     */\n    headers: PropTypes.object,\n    /**\n     * Headers that will be passed when subscribing to a destination.\n     */\n    subscribeHeaders: PropTypes.object,\n    /**\n     * Should the client try to automatically connect in an event of disconnection.\n     */\n    autoReconnect: PropTypes.bool,\n    /**\n     * Enable debugging mode.\n     */\n    debug: PropTypes.bool,\n    /**\n     * Number of milliseconds to send and expect heartbeat messages.\n     */\n    heartbeat: PropTypes.number,\n    /**\n     * Number of milliseconds to expect heartbeat messages\n     */\n    heartbeatIncoming: PropTypes.number,\n    /**\n     * Number of milliseconds to send heartbeat messages\n     */\n    heartbeatOutgoing: PropTypes.number,\n    /**\n     * Callback if connection could not be established\n     */\n    onConnectFailure: PropTypes.func\n  }\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      connected: false,\n      // False if disconnect method is called without a subsequent connect\n      explicitDisconnect: false\n    }\n\n    this.subscriptions = new Map()\n    this.retryCount = 0\n  }\n\n  componentDidMount () {\n    this._connect()\n  }\n\n  componentWillUnmount () {\n    this.disconnect()\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    return false\n  }\n\n  UNSAFE_componentWillReceiveProps (nextProps) {\n    if (this.state.connected) {\n      // Subscribe to new topics\n      Lo.difference(nextProps.topics, this.props.topics)\n        .forEach((newTopic) => {\n          this._log('Subscribing to topic: ' + newTopic)\n          this._subscribe(newTopic)\n        })\n\n      // Unsubscribe from old topics\n      Lo.difference(this.props.topics, nextProps.topics)\n        .forEach((oldTopic) => {\n          this._log('Unsubscribing from topic: ' + oldTopic)\n          this._unsubscribe(oldTopic)\n        })\n    }\n  }\n\n  render () {\n    return null\n  }\n\n  _initStompClient = () => {\n    // Websocket held by stompjs can be opened only once\n    this.client = Stomp.over(new SockJS(this.props.url, null, this.props.options))\n\n    this.client.heartbeat.outgoing = this.props.heartbeat\n    this.client.heartbeat.incoming = this.props.heartbeat\n\n    if (Object.keys(this.props).includes('heartbeatIncoming')) {\n      this.client.heartbeat.incoming = this.props.heartbeatIncoming\n    }\n    if (Object.keys(this.props).includes('heartbeatOutgoing')) {\n      this.client.heartbeat.outgoing = this.props.heartbeatOutgoing\n    }\n    if (!this.props.debug) {\n      this.client.debug = () => {}\n    }\n  }\n\n  _cleanUp = () => {\n    this.setState({ connected: false })\n    this.retryCount = 0\n    this.subscriptions.clear()\n  }\n\n  _log = (msg) => {\n    if (this.props.debug) {\n      console.log(msg)\n    }\n  }\n\n  _subscribe = (topic) => {\n    if (!this.subscriptions.has(topic)) {\n      let sub = this.client.subscribe(topic, (msg) => {\n        this.props.onMessage(this._processMessage(msg.body), msg.headers.destination)\n      }, this.props.subscribeHeaders)\n      this.subscriptions.set(topic, sub)\n    }\n  }\n\n  _processMessage = (msgBody) => {\n    try {\n      return JSON.parse(msgBody)\n    } catch (e) {\n      return msgBody\n    }\n  }\n\n  _unsubscribe = (topic) => {\n    let sub = this.subscriptions.get(topic)\n    sub.unsubscribe()\n    this.subscriptions.delete(topic)\n  }\n\n  _connect = () => {\n    this._initStompClient()\n    this.client.connect(this.props.headers, () => {\n      this.setState({ connected: true })\n      this.props.topics.forEach((topic) => {\n        this._subscribe(topic)\n      })\n      this.props.onConnect()\n    }, (error) => {\n      if (error) {\n        if (Object.keys(this.props).includes('onConnectFailure')) {\n          this.props.onConnectFailure(error)\n        } else {\n          this._log(error.stack)\n        }\n      }\n      if (this.state.connected) {\n        this._cleanUp()\n        // onDisconnect should be called only once per connect\n        this.props.onDisconnect()\n      }\n      if (this.props.autoReconnect && !this.state.explicitDisconnect) {\n        this._timeoutId = setTimeout(this._connect, this.props.getRetryInterval(this.retryCount++))\n      }\n    })\n  }\n\n  /**\n   * Connect to the server if not connected. Under normal circumstances component\n   * will automatically try to connect to server. This method is mostly useful\n   * after component is explicitly disconnected via {@link SockJsClient#disconnect}.\n   *\n   * @public\n   */\n  connect = () => {\n    this.setState({ explicitDisconnect: false })\n    if (!this.state.connected) {\n      this._connect()\n    }\n  }\n\n  /**\n   * Disconnect STOMP client and disable all reconnect.\n   *\n   * @public\n   */\n  disconnect = () => {\n    // On calling disconnect explicitly no effort will be made to reconnect\n    // Clear timeoutId in case the component is trying to reconnect\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId)\n      this._timeoutId = null\n    }\n    this.setState({ explicitDisconnect: true })\n    if (this.state.connected) {\n      this.subscriptions.forEach((subid, topic) => {\n        this._unsubscribe(topic)\n      })\n      this.client.disconnect(() => {\n        this._cleanUp()\n        this.props.onDisconnect()\n        this._log('Stomp client is successfully disconnected!')\n      })\n    }\n  }\n\n  /**\n   * Send message to the specified topic.\n   *\n   * @param {string} topic target topic to send message\n   * @param {string} msg message to send\n   * @param {Object} [opt_headers={}] additional headers for underlying STOMP client\n   * @public\n   */\n  sendMessage = (topic, msg, opt_headers = {}) => {\n    if (this.state.connected) {\n      this.client.send(topic, opt_headers, msg)\n    } else {\n      throw new Error('Send error: SockJsClient is disconnected')\n    }\n  }\n}\n\nexport default SockJsClient","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport './App.css'\nimport { TabMenu } from 'primereact/tabmenu'\nimport 'primeflex/primeflex.css'\nimport VoteMap from './map/VoteMap';\nimport Littlenogroup from './results/Littlenogroup';\nimport Biggerpartygroup from './results/Biggerpartygroup';\nimport Bigger from './results/Bigger';\nimport Little from './results/Little';\nimport { getTabs, getVotingPaperById } from './Utilities';\nimport 'primereact/resources/themes/nova/theme.css'\nimport 'primereact/resources/primereact.min.css'\nimport 'primeicons/primeicons.css'\nimport logo from './images/logo.ico'\nimport {history, language} from './index'\n\nexport var config\n\nclass App extends Component {\n\n    constructor(data) {\n        super(data)\n        config = data.config\n        let activeItem = {}\n        if (config.votingPapers && config.votingPapers[0])\n        \tactiveItem = { id: config.votingPapers[0].id, label: config.votingPapers[0].name }\n        this.state = {\n            items: [\n                ],\n            activeItem: activeItem,\n            activeItemIndex: 0,\n            zone: null,\n            activeTabVote: { id: 0, label: <FormattedMessage id='app.tab.ballots' defaultMessage='BALLOTS' /> },\n            activeTabVoteIndex: 0\n        }\n \t   \tthis.voteMap = React.createRef();\n \t   \tthis.results = React.createRef();\n    }\n\n    componentDidMount() {\n        let i = 0\n        config.votingPapers.map((votingPaper) => {\n        \tif (votingPaper.type !== 'bigger' && votingPaper.type !== 'bigger-partygroup')\n        \t\tthis.state.items.push({ id: votingPaper.id, label: votingPaper.name })\n        \telse if (i === 0) {\n        \t\tthis.state.items.push({ id: votingPaper.id, label: votingPaper.name })\n        \t\ti++;\n        \t}\n        \treturn votingPaper\n        })\n \t   \n\t   const tabs = getTabs(this, '.vote-tabmenu')\n\t   if (tabs && tabs[0]) {\n\t\t\ttabs[0].click()\n\t   }\n    }\n\n    render() {\n    \tif (this.state.zone && (this.state.votingPaper.type === 'bigger-partygroup' || this.state.votingPaper.type === 'bigger')) {\n\t\t\tlet changedItem = this.state.items[0]\n\t\t\tchangedItem.id = this.state.votingPaper.id\n\t\t\tchangedItem.label = this.state.votingPaper.name\n\t\t}\n    \tlet results = ''\n        if (this.state.votingPaper) {\n        \tif (this.state.votingPaper.type === 'bigger-partygroup')\n        \t\tresults = <Biggerpartygroup ref={this.results} votingPaper={this.state.votingPaper} app={this} />\n        \telse if (this.state.votingPaper.type === 'little')\n        \t\tresults = <Little ref={this.results} votingPaper={this.state.votingPaper} app={this} />\n        \telse if (this.state.votingPaper.type === 'bigger')\n        \t\tresults = <Bigger ref={this.results} votingPaper={this.state.votingPaper} app={this} />\n        \telse if (this.state.votingPaper.type === 'little-nogroup')\n        \t\tresults = <Littlenogroup ref={this.results} votingPaper={this.state.votingPaper} app={this} />\n        }\n    \tlet subtitle = ''\n    \tif (history) {\n    \t\tlet options = { year: 'numeric', month: 'long', day: 'numeric' }\n    \t\tsubtitle = <FormattedMessage\n\t\t\t\t\t\t\tid='app.subtitle'\n\t\t\t\t\t\t\tvalues = {{0: new Date(history).toLocaleDateString(language, options)}}\n\t\t\t\t\t\t\tdefaultMessage=' for {0}' />\n    \t}\n    \tlet boxLive = ''\n    \tif (!history) {\n    \t\tconst imlive = './icona_live.png';\n    \t\tboxLive = <div className='box-live img-responsive inmlive'>\n    \t\t\t\t\t\t<img alt='Online' src={imlive} />\n                      </div>\n        }\n\t\treturn (\n            <div className='html navbar-is-fixed-top cbp-spmenu-push excludeIE10 enhanced'>\n            \t<div className='content-section implementation'>\n                \t<div className='second-row'>\n        \t\t\t\t<div className='container container-live'>\n                     \t\t{boxLive}\n                     \t\t<div className='box-title'>\n                     \t\t\t<FormattedMessage\n                     \t\t\t\tid='app.title'\n                     \t\t\t\tdefaultMessage='Affluence and Results'>\n                     \t\t\t\t\t{(title) => <p><strong>{title}{subtitle}</strong></p>}\n                     \t\t\t</FormattedMessage>\n                     \t\t</div>\n                     \t\t<div className='powered'>\n                     \t\t\t<img alt='logo' className='logo' src={logo} />\n             \t\t\t\t\t<FormattedMessage\n             \t\t\t\t\tid='app.powered'\n             \t\t\t\t\t\tdefaultMessage='Powered by'>\n         \t\t\t\t\t\t\t{(title) => <span><p>{title}&nbsp;</p><a href='http://www.vige.it'>Vige</a></span>}\n         \t\t\t\t\t\t\t</FormattedMessage>\n         \t\t\t\t\t</div>\n                     \t</div>\n                    </div>\n                \t<TabMenu ref='tabMenu' className='vote-tabmenu' model={this.state.items} activeIndex={this.state.activeItemIndex} onTabChange={(e) => {\n                \t\tthis.setState({ activeItem: e.value,\n                \t\t\t\t\tvotingPaper: getVotingPaperById(e.value),\n                \t\t\t\t\t\tactiveItemIndex: e.index })\n                \t\t}\n                \t} />\n                \t\n                    <div className='my-content p-grid'>\n                        <div className='p-col-fixed' style={{ width: '100%', paddingRight: '40px' }}>\n                        \t<VoteMap ref={this.voteMap} votingPaper={this.state.votingPaper} app={this} />\n                        </div>\n                        <div className='p-col'>\n                            {results}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport './Candidates.css'\nimport { getVotesById } from '../Utilities';\nimport { language, history } from '../index'\nimport SockJsClient from '../SockJsClient'\n\nexport class Candidates extends Component {\n\n    candidateTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n    \n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.props.party) {\n        \tlet values = this.props.party.candidates\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, this.props.votes[this.props.votes.length -1])\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes\n        \t\t}\n        \t\tfor (let i = 0; i< this.props.votes.length; i++)\n        \t\t\tjsonValue['votes'+i] = getVotesById(e.id, this.props.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let lists = <FormattedMessage id='app.table.candidate' defaultMessage='Candidate' />\n            let votes = <FormattedMessage id='app.table.preferences' defaultMessage='Preferences' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px'\n            \t\t\t className='candidates-table'>\n        \t\t\t\t\t<Column field='image' body={this.candidateTemplate} style={{width:'14%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} style={{width:'70%'}} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.props.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.numbers' defaultMessage='hours {0}' values={{0: new Date(this.props.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'votes'+i} header={header} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\t\tscrollable={true} scrollHeight='450px'\n\t\t\t \t\t\t\tclassName='candidates-table'>\n\t\t\t\t\t\t\t\t<Column field='image' body={this.candidateTemplate} style={{width:'14%'}} />\n\t\t\t\t\t\t\t\t<Column field='name' header={lists} style={{width:'50%'}} />\n\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \t\tif (this.props.party) {\n    \t    \tlet realTimeVotes = ''\n    \t        if (!history)\n    \t            realTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n    \t            \t\t\t\t\tonMessage={(msg) => { \n    \t            \t\t\t\t\t\tthis.setState({\n    \t            \t\t\t\t\t\t\tvotes: msg.votings\n    \t            \t\t\t\t\t\t})\n    \t            \t\t\t\t}} />\n    \t\t\treturn (\n    \t\t\t\t<div className='tableContent'>\n            \t\t\t{realTimeVotes}\n    \t\t\t\t\t<div className='party-for-candidates'>\n    \t\t\t\t\t\t<img src={`data:image/jpeg;base64,${this.props.party.image}`}\n            \t\t\t\t\t\talt={this.props.party.name} \n            \t\t\t\t\t\tstyle={{ width:'66px', left:'2%', bottom:'6px', position:'relative' }} />\n            \t\t\t\t\t<div className='title-for-candidates'>{this.props.party.name}</div>\n    \t\t\t\t\t</div>\n    \t\t\t\t\t{this.renderDataTable()}\n    \t\t\t\t</div>\n    \t\t\t)\n    \t\t} else return ''\n    }\n}\n\nexport default Candidates","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { Button } from 'primereact/button'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport './Results.css'\nimport './Littlenogroup.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\nimport {ProgressSpinner} from 'primereact/progressspinner'\n\nexport class Littlenogroup extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n        \tshowCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({\n    \t    \t\tvotes: response.data.votings,\n    \t    \t\tvotingPaper: this.props.app.state.votingPaper\n    \t    \t})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div id='headEnti'>\n        \t\t\t<h2>{getTitle()}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'50%', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\n    render() {\n    \tlet realTimeVotingPapers = ''\n    \tlet realTimeVotes = ''\n    \tlet dataTable = ''\n    \tlet progressSpinner = ''\n    \tif (!this.state.votes)\n    \t\tprogressSpinner = <ProgressSpinner/>\n    \tif (this.state.votes && this.state.votingPaper) {\n        \tif (!history) {\n    \t\t\trealTimeVotingPapers = <SockJsClient url={process.env.REACT_APP_VOTING_PAPERS_REALTIME_URL} topics={['/topic/votingpaper']}\n    \t\t\t\t\t\t\t\t\t\tonMessage={(msg) => {\n        \t            \t\t\t\t\tthis.setState({\n        \t            \t\t\t\t\t\tvotingPaper: msg.votingPapers.filter(((e) => e.id === this.state.votingPaper.id))[0]\n        \t            \t\t\t\t\t})\n    \t\t\t\t\t\t\t\t   }} />\n        \t    realTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n        \t            \t\t\tonMessage={(msg) => { \n        \t            \t\t\t\tthis.setState({\n        \t            \t\t\t\t\tvotes: msg.votings\n        \t            \t\t\t\t})\n        \t            \t\t}} />\n        \t}\n    \t\tlet vote = this.state.votes[this.state.votes.length -1]\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n    \t\tlet votingValues = getVotesById(this.state.votingPaper.id, vote)\n    \t\tlet blankPapersValues = getBlankPapers(this.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n    \t\tlet updateDateValues = getUpdateDate(vote)\n    \t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp; \n    \t\t\t\t\t\t{blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n    \t\t\t\t\t\t{updateDate} <span className='footer-value'>{updateDateValues}</span>\n    \t\t\t\t\t </div>\n    \t\tlet values = this.state.votingPaper.parties\n    \t\tlet value = values.map((e) => {\n    \t\t\t\tlet numberVotes = getVotesById(e.id, vote)\n                \tlet percent = getPercent(e.id, vote)\n            \t\tlet jsonValue = {\n            \t\t\tid: e.id,\n            \t\t\tname: e.name,\n            \t\t\timage: e.image,\n            \t\t\tvotes: numberVotes,\n            \t\t\tpercent: percent\n            \t\t}\n            \t\tfor (let i = 0; i< this.state.votes.length; i++)\n            \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n            \t\treturn jsonValue\n    \t\t})\n    \t\tlet lists = <FormattedMessage id='app.table.lists' defaultMessage='Lists' />\n    \t\tlet votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n    \t\t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}>\n    \t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n    \t\t\t\t\t\t<Column field='name' header={lists} body={this.candidatesTemplate} style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n    \t\t\t\t\t</DataTable>\n    \t\telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tscrollable={true} scrollHeight='450px' footer={footer}>\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} body={this.candidatesTemplate} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n    \t\t}\n    \t}\n        return (\n        \t<div className='tableContent'>\n        \t\t{progressSpinner}\n        \t\t{realTimeVotingPapers}\n    \t\t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle()}</h3>\n        \t\t</div>\n            \t{dataTable}\n            \t<Dialog visible={this.state.showCandidates} \n        \t\t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n        \t\t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n        \t\t\t<Candidates party={this.state.selectedParty} \n        \t\t\t\tvotes={this.state.votes} app={this.props.app} />\n        \t\t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Littlenogroup","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { ColumnGroup } from 'primereact/columngroup'\nimport { Button } from 'primereact/button'\nimport { Row } from 'primereact/row'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport './Results.css'\nimport './Biggerpartygroup.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\nimport {ProgressSpinner} from 'primereact/progressspinner'\n\nexport class Biggerpartygroup extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            expandedRows: null,\n            showCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({\n    \t    \t\tvotes: response.data.votings,\n    \t    \t\tvotingPaper: this.props.app.state.votingPaper\n    \t    \t})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.listsTemplate = this.listsTemplate.bind(this);\n        this.rowExpansionTemplate = this.rowExpansionTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div id='headEnti'>\n        \t\t\t<h2>{getTitle(this.props.app.state.zone)}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n    \n    rowExpansionTemplate(data) {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n            let values = getComponentById(data.id, this.state.votingPaper).parties\n            let sumValue = 0\n            let sumPercent = 0\n            let sumPercentBallots = []\n            let value = values.map((e) => {\n                let numberVotes = getVotesById(e.id, vote)\n                sumValue += numberVotes\n            \tlet percent = getPercent(e.id, vote)\n                sumPercent += percent\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++) {\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\t\tsumPercentBallots += jsonValue['percent'+i]\n        \t\t}\n        \t\treturn jsonValue\n            })\n            let footer = ''\n            if (values.length > 1) {\n        \t\tlet votings =  <FormattedMessage id='app.table.totallists' defaultMessage='Total lists' />\n            \tif (this.props.app.state.activeTabVote.id === 0)\n            \t\tfooter = <ColumnGroup>\n            \t\t\t\t\t\t<Row>\n            \t\t\t\t\t\t\t<Column colSpan={2} />\n            \t\t\t\t\t\t\t<Column footer={votings} />\n            \t\t\t\t\t\t\t<Column footer={sumValue} />\n            \t\t\t\t\t\t\t<Column footer={sumPercent} />\n            \t\t\t\t\t\t</Row>\n            \t\t\t\t\t </ColumnGroup>\n            \telse {\n        \t\t\tlet columns = []\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} footer={sumPercentBallots[i]} />)\n        \t\t\tfooter = <ColumnGroup>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Column colSpan={2} />\n\t\t\t\t\t\t\t\t\t\t<Column footer={votings} />\n\t\t\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t</ColumnGroup>\n            \t}\n            }\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n            \t\t\t footerColumnGroup={footer} className='biggernogroup-sub-header'>\n            \t\t\t\t<Column />\n            \t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' style={{width: '70%' }} body={this.candidatesTemplate} />\n        \t\t\t\t\t<Column field='votes' />\n        \t\t\t\t\t<Column field='percent' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n            else {\n        \t\t\tlet columns = []\n        \t\t\tlet namePercent = 0\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} style={{width:'10%'}} />)\n            \t\tnamePercent = 80 - this.state.votes.length * 10\n        \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tfooterColumnGroup={footer} className='biggernogroup-sub-header'>\n\t\t\t\t\t\t\t<Column style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' body={this.candidatesTemplate} style={{width: namePercent + '%'}} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n            }\n        }\n        return dataTable\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'50%', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\n    listsTemplate(rowData) {\n    \tlet images = ''\n    \tlet component = getComponentById(rowData.id, this.state.votingPaper)\n    \timages = component.parties.map(e => e.image ? <img key={e.id} src={`data:image/jpeg;base64,${e.image}`} \n\t\t\t\t\t\t\t\t  alt={rowData.name} style={{ width:'10%' }} /> : '')\n        return <div>{rowData.name} \n        \t\t  <div className='border-images'>\n        \t\t\t <span className='party-images'>{images}</span>\n        \t\t  </div>\n        \t   </div>\n    }\n\t\n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n        \tlet values = this.state.votingPaper.groups\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, vote)\n            \tlet percent = getPercent(e.id, vote)\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n\t\t\tlet votingValues = getVotesById(this.state.votingPaper.id, vote)\n\t\t\tlet blankPapersValues = getBlankPapers(this.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n            let updateDateValues = getUpdateDate(vote)\n\t\t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp;\n\t\t\t\t\t\t\t  {blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n\t    \t\t\t\t\t  {updateDate} <span className='footer-value'>{updateDateValues}</span>\n\t\t\t\t\t\t </div>\n            let lists = <FormattedMessage id='app.table.candidatesandlists' defaultMessage='Candidates and Lists' />\n            let votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}\n        \t\t\t\t expandedRows={this.state.expandedRows} \n        \t\t\t\t onRowToggle={(e) => this.setState({expandedRows:e.data})}\n        \t\t\t\t rowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\t className='biggernogroup-table'>\n            \t\t\t\t<Column field='id' expander/>\n        \t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} body={this.listsTemplate} className='padding-name' style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tlet namePercent = 0\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n\t\t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n        \t\t}\n    \t\t\tnamePercent = 80 - this.state.votes.length * 10\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n            \t\t\tscrollable={true} scrollHeight='450px' footer={footer}\n\t\t\t \t\t\texpandedRows={this.state.expandedRows} \n\t\t\t \t\t\tonRowToggle={(e) => this.setState({expandedRows:e.data})}\n\t\t\t \t\t\trowExpansionTemplate={this.rowExpansionTemplate}\n\t\t\t \t\t\tclassName='biggernogroup-table'>\n\t\t\t\t\t\t\t<Column field='id' expander style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} className='padding-name' style={{width: namePercent + '%' }} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \tlet realTimeVotingPapers = ''\n    \tlet realTimeVotes = ''\n    \tlet progressSpinner = ''\n    \tif (!this.state.votes)\n    \t\tprogressSpinner = <ProgressSpinner/>\n        if (!history) {\n    \t\trealTimeVotingPapers = <SockJsClient url={process.env.REACT_APP_VOTING_PAPERS_REALTIME_URL} topics={['/topic/votingpaper']}\n    \t\t\t\t\t\t\t\t\tonMessage={(msg) => {\n        \t            \t\t\t\t\tthis.setState({\n        \t            \t\t\t\t\t\tvotingPaper: msg.votingPapers.filter(((e) => e.id === this.state.votingPaper.id))[0]\n        \t            \t\t\t\t\t})\n    \t\t\t\t\t\t\t   }} />\n        \trealTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n        \t\t\t\t\t\tonMessage={(msg) => { \n        \t\t\t\t\t\t\tthis.setState({\n        \t\t\t\t\t\t\t\tvotes: msg.votings\n        \t\t\t\t\t\t\t})\n        \t\t\t\t\t}} />\n        }\n        return (\n        \t<div className='tableContent'>\n        \t\t{progressSpinner}\n        \t\t{realTimeVotingPapers}\n    \t\t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle(this.props.app.state.zone)}</h3>\n        \t\t</div>\n            \t{this.renderDataTable()}\n            \t<Dialog visible={this.state.showCandidates} \n        \t\t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n        \t\t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n        \t\t\t<Candidates zone={this.props.app.state.zone} party={this.state.selectedParty} \n        \t\t\t\tvotes={this.state.votes} app={this.props.app} />\n        \t\t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Biggerpartygroup","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { ColumnGroup } from 'primereact/columngroup'\nimport { Button } from 'primereact/button'\nimport { Row } from 'primereact/row'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport './Results.css'\nimport './Bigger.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\nimport {ProgressSpinner} from 'primereact/progressspinner'\n\nexport class Bigger extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            expandedRows: null,\n            showCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({\n    \t    \t\tvotes: response.data.votings,\n    \t    \t\tvotingPaper: this.props.app.state.votingPaper\n    \t    \t})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.listsTemplate = this.listsTemplate.bind(this);\n        this.rowExpansionTemplate = this.rowExpansionTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div>\n        \t\t\t<h2>{getTitle(this.props.app.state.zone)}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n    \n    rowExpansionTemplate(data) {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n            let values = getComponentById(data.id, this.state.votingPaper).parties\n            let sumValue = 0\n            let sumPercent = 0\n            let sumPercentBallots = []\n            let value = values.map((e) => {\n                let numberVotes = getVotesById(e.id, vote)\n                sumValue += numberVotes\n            \tlet percent = getPercent(e.id, vote)\n                sumPercent += percent\n                let jsonValue = {\n                \tid: e.id,\n                \tname: e.name,\n                \timage: e.image,\n                \tvotes: numberVotes,\n                \tpercent: percent\n                }\n        \t\tfor (let i = 0; i< this.state.votes.length; i++) {\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\t\tsumPercentBallots += jsonValue['percent'+i]\n        \t\t}\n        \t\treturn jsonValue\n            })\n            let footer = ''\n            if (values.length > 1) {\n        \t\tlet votings =  <FormattedMessage id='app.table.totallists' defaultMessage='Total lists' />\n            \tif (this.props.app.state.activeTabVote.id === 0)\n            \t\tfooter = <ColumnGroup>\n            \t\t\t\t\t\t<Row>\n            \t\t\t\t\t\t\t<Column colSpan={2} />\n            \t\t\t\t\t\t\t<Column footer={votings} />\n            \t\t\t\t\t\t\t<Column footer={sumValue} />\n            \t\t\t\t\t\t\t<Column footer={sumPercent} />\n            \t\t\t\t\t\t</Row>\n            \t\t\t\t </ColumnGroup>\n            \telse {\n        \t\t\tlet columns = []\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} footer={sumPercentBallots[i]} />)\n            \t\tfooter = <ColumnGroup>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Column colSpan={2} />\n\t\t\t\t\t\t\t\t\t\t<Column footer={votings} />\n\t\t\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t </ColumnGroup>\n            \t}\n            }\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n            \t\t\t footerColumnGroup={footer} className='bigger-sub-header'>\n            \t\t\t\t<Column />\n            \t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' style={{width: '70%' }} body={this.candidatesTemplate} />\n        \t\t\t\t\t<Column field='votes' />\n        \t\t\t\t\t<Column field='percent' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n            else {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} style={{width:'10%'}} />)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\t footerColumnGroup={footer} className='bigger-sub-header'>\n\t\t\t\t\t\t\t<Column style={{width: '6%' }} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' body={this.candidatesTemplate} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n            }\n        }\n        return dataTable\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'50%', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\n    listsTemplate(rowData) {\n    \tlet images = ''\n    \tlet component = getComponentById(rowData.id, this.state.votingPaper)\n    \timages = component.parties.map(e => e.image ? <img key={e.id} src={`data:image/jpeg;base64,${e.image}`} \n\t\t\t\t\t\t\t\t  alt={rowData.name} style={{ width:'10%' }} /> : '')\n        return <div>{rowData.name} \n        \t\t  <div className='border-images'>\n        \t\t\t <span className='party-images'>{images}</span>\n        \t\t  </div>\n        \t   </div>\n    }\n\t\n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n        \tlet values = this.state.votingPaper.groups\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, vote)\n            \tlet percent = getPercent(e.id, vote)\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n\t\t\tlet votingValues = getVotesById(this.state.votingPaper.id, vote)\n\t\t\tlet blankPapersValues = getBlankPapers(this.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n            let updateDateValues = getUpdateDate(vote)\n\t\t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp;\n\t\t\t\t\t\t\t  {blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n\t    \t\t\t\t\t  {updateDate} <span className='footer-value'>{updateDateValues}</span>\n\t\t\t\t\t\t </div>\n            let lists = <FormattedMessage id='app.table.governersandlists' defaultMessage='Candidates and Lists' />\n            let votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}\n        \t\t\t\t expandedRows={this.state.expandedRows} \n        \t\t\t\t onRowToggle={(e) => this.setState({expandedRows:e.data})}\n        \t\t\t\t rowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\t className='bigger-table'>\n            \t\t\t\t<Column field='id' expander/>\n        \t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} body={this.listsTemplate} style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tscrollable={true} scrollHeight='450px' footer={footer}\n\t\t\t \t\t\texpandedRows={this.state.expandedRows} \n\t\t\t \t\t\tonRowToggle={(e) => this.setState({expandedRows:e.data})}\n\t\t\t \t\t\trowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\tclassName='bigger-table'>\n\t\t\t\t\t\t\t<Column field='id' expander style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \tlet realTimeVotingPapers = ''\n    \tlet realTimeVotes = ''\n    \tlet progressSpinner = ''\n    \tif (!this.state.votes)\n    \t\tprogressSpinner = <ProgressSpinner/>\n    \tif (!history) {\n    \t\trealTimeVotingPapers = <SockJsClient url={process.env.REACT_APP_VOTING_PAPERS_REALTIME_URL} topics={['/topic/votingpaper']}\n    \t\t\t\t\t\t\t\t\tonMessage={(msg) => {\n        \t            \t\t\t\t\tthis.setState({\n        \t            \t\t\t\t\t\tvotingPaper: msg.votingPapers.filter(((e) => e.id === this.state.votingPaper.id))[0]\n        \t            \t\t\t\t\t})\n    \t\t\t\t\t\t\t   }} />\n        \trealTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n        \t            \t\tonMessage={(msg) => { \n        \t            \t\t\tthis.setState({\n        \t            \t\t\t\tvotes: msg.votings\n        \t            \t\t\t})\n        \t            \t}} />\n    \t}\n        return (\n        \t<div className='tableContent'>\n        \t\t{progressSpinner}\n        \t\t{realTimeVotingPapers}\n        \t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle(this.props.app.state.zone)}</h3>\n        \t\t</div>\n            \t{this.renderDataTable()}\n            \t<Dialog visible={this.state.showCandidates} \n            \t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n            \t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n            \t\t<Candidates zone={this.props.app.state.zone} party={this.state.selectedParty} \n            \t\t\tvotes={this.state.votes} app={this.props.app} />\n            \t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Bigger","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { ColumnGroup } from 'primereact/columngroup'\nimport { Button } from 'primereact/button'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport { Row } from 'primereact/row'\nimport './Results.css'\nimport './Little.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\nimport {ProgressSpinner} from 'primereact/progressspinner'\n\nexport class Little extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            expandedRows: null,\n            showCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({\n    \t    \t\tvotes: response.data.votings,\n    \t    \t\tvotingPaper: this.props.app.state.votingPaper\n    \t    \t})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.listsTemplate = this.listsTemplate.bind(this);\n        this.rowExpansionTemplate = this.rowExpansionTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div id='headEnti'>\n        \t\t\t<h2>{getTitle()}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n    \n    rowExpansionTemplate(data) {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n            let values = getComponentById(data.id, this.state.votingPaper).parties\n            let sumValue = 0\n            let sumPercent = 0\n            let sumPercentBallots = []\n            let value = values.map((e) => {\n                let numberVotes = getVotesById(e.id, vote)\n                sumValue += numberVotes\n            \tlet percent = getPercent(e.id, vote)\n                sumPercent += percent\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++) {\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\t\tsumPercentBallots += jsonValue['percent'+i]\n        \t\t}\n        \t\treturn jsonValue\n            })\n            let footer = ''\n            if (values.length > 1) {\n        \t\tlet votings =  <FormattedMessage id='app.table.totallists' defaultMessage='Total lists' />\n            \tif (this.props.app.state.activeTabVote.id === 0)\n            \t\tfooter = <ColumnGroup>\n            \t\t\t\t\t\t<Row>\n            \t\t\t\t\t\t\t<Column colSpan={2} />\n            \t\t\t\t\t\t\t<Column footer={votings} />\n            \t\t\t\t\t\t\t<Column footer={sumValue} />\n            \t\t\t\t\t\t\t<Column footer={sumPercent} />\n            \t\t\t\t\t\t</Row>\n            \t\t\t\t </ColumnGroup>\n            \telse {\n        \t\t\tlet columns = []\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} footer={sumPercentBallots[i]} />)\n            \t\tfooter = <ColumnGroup>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Column colSpan={2} />\n\t\t\t\t\t\t\t\t\t\t<Column footer={votings} />\n\t\t\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t </ColumnGroup>\n            \t}\n            }\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n            \t\t\t footerColumnGroup={footer} className='little-sub-header'>\n            \t\t\t\t<Column />\n            \t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' style={{width: '70%' }} body={this.candidatesTemplate} />\n        \t\t\t\t\t<Column field='votes' />\n        \t\t\t\t\t<Column field='percent' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n            else {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} style={{width:'10%'}} />)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\t footerColumnGroup={footer} className='little-sub-header'>\n\t\t\t\t\t\t\t<Column style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' style={{width: '50%' }} body={this.candidatesTemplate} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n            }\n        }\n        return dataTable\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'50%', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\n    listsTemplate(rowData) {\n    \tlet images = ''\n    \tlet component = getComponentById(rowData.id, this.state.votingPaper)\n    \timages = component.parties.map(e => e.image ? <img key={e.id} src={`data:image/jpeg;base64,${e.image}`} \n\t\t\t\t\t\t\t\t  alt={rowData.name} style={{ width:'10%' }} /> : '')\n        return <div>{rowData.name} \n        \t\t  <div className='border-images'>\n        \t\t\t <span className='party-images'>{images}</span>\n        \t\t  </div>\n        \t   </div>\n    }\n\t\n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n        \tlet values = this.state.votingPaper.groups\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, vote)\n            \tlet percent = getPercent(e.id, vote)\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n\t\t\tlet votingValues = getVotesById(this.state.votingPaper.id, vote)\n\t\t\tlet blankPapersValues = getBlankPapers(this.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n        \tlet updateDateValues = getUpdateDate(vote)\n\t\t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp;\n\t\t\t\t\t\t\t  {blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n\t    \t\t\t\t\t  {updateDate} <span className='footer-value'>{updateDateValues}</span>\n\t\t\t\t\t\t </div>\n            let lists = <FormattedMessage id='app.table.premiersandlists' defaultMessage='Premiers and Lists' />\n            let votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}\n        \t\t\t\t expandedRows={this.state.expandedRows} \n        \t\t\t\t onRowToggle={(e) => this.setState({expandedRows:e.data})}\n        \t\t\t\t rowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\t className='little-table'>\n            \t\t\t\t<Column field='id' expander/>\n        \t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} body={this.listsTemplate} style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tscrollable={true} scrollHeight='450px' footer={footer}\n\t\t\t \t\t\texpandedRows={this.state.expandedRows} \n\t\t\t \t\t\tonRowToggle={(e) => this.setState({expandedRows:e.data})}\n\t\t\t \t\t\trowExpansionTemplate={this.rowExpansionTemplate}\n\t\t\t \t\t\tclassName='little-table'>\n\t\t\t\t\t\t\t<Column field='id' expander style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} style={{width: '50%' }} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \tlet realTimeVotingPapers = ''\n    \tlet realTimeVotes = ''\n    \tlet progressSpinner = ''\n    \tif (!this.state.votes)\n    \t\tprogressSpinner = <ProgressSpinner/>\n\t    if (!history) {\n    \t\trealTimeVotingPapers = <SockJsClient url={process.env.REACT_APP_VOTING_PAPERS_REALTIME_URL} topics={['/topic/votingpaper']}\n    \t\t\t\t\t\t\t\t\tonMessage={(msg) => {\n        \t            \t\t\t\t\tthis.setState({\n        \t            \t\t\t\t\t\tvotingPaper: msg.votingPapers.filter(((e) => e.id === this.state.votingPaper.id))[0]\n        \t            \t\t\t\t\t})\n    \t\t\t\t\t\t\t   }} />\n\t        realTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n\t            \t\t\t\tonMessage={(msg) => {\n\t            \t\t\t\t\tthis.setState({\n\t            \t\t\t\t\t\tvotes: msg.votings\n\t            \t\t\t\t\t})\n\t            \t\t\t}} />\n        }\n        return (\n        \t<div className='tableContent'>\n        \t\t{progressSpinner}\n        \t\t{realTimeVotingPapers}\n    \t\t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle()}</h3>\n        \t\t</div>\n            \t{this.renderDataTable()}\n            \t<Dialog visible={this.state.showCandidates} \n        \t\t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n        \t\t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n        \t\t\t<Candidates party={this.state.selectedParty} \n        \t\t\t\tvotes={this.state.votes} app={this.props.app} />\n        \t\t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Little","export default __webpack_public_path__ + \"static/media/logo.11ab22ed.ico\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport './ErrorBoundary.css'\n\nclass ErrorBoundary extends React.Component {\n  \n  render() {\n      // Error path\n\t  return (\n        <div className='error-boundary'>\n          <h2><FormattedMessage\n          \t\tid='app.error'\n          \t\tdefaultMessage='Something went wrong.' />\n          </h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.props.error && this.props.error.toString()}\n            <br />\n            {this.props.errorInfo.componentStack}\n          </details>\n        </div>\n      )\n  }  \n}\n\nexport default ErrorBoundary","import React from 'react'\n\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {IntlProvider} from 'react-intl'\nimport * as serviceWorker from './serviceWorker'\nimport messages_it from './translations/it.json'\nimport axios from 'axios'\nimport {ProgressSpinner} from 'primereact/progressspinner'\nimport ErrorBoundary from './errors/ErrorBoundary'\n\nconst messages = {\n    'it': messages_it\n}\n\nexport const language = navigator.language.split(/[-_]/)[0]  // language without region code\nexport var history = ''\n\nlet voting_papers_url = process.env.REACT_APP_VOTING_PAPERS_URL\nif (window.location.search.startsWith('?date=')) {\n\thistory = window.location.search.split('=')[1]\n\tvoting_papers_url = process.env.REACT_APP_HISTORY_VOTING_PAPERS_URL + '/' + history\n}\nReactDOM.render(<ProgressSpinner/>, document.getElementById('root'))\naxios\n\t.get(voting_papers_url)\n\t.then(function(papers) {\n\t    ReactDOM.render(<IntlProvider locale={language} messages={messages[language]}><App config={papers.data} /></IntlProvider>, document.getElementById('root'))\n\t    // If you want your app to work offline and load faster, you can change\n\t    // unregister() to register() below. Note this comes with some pitfalls.\n\t    // Learn more about service workers: http://bit.ly/CRA-PWA\n\t\tserviceWorker.register()\n\t})\n\t.catch(function(error) {\n\t\tReactDOM.render(<IntlProvider locale={language} messages={messages[language]}><ErrorBoundary error={error} errorInfo={error}/></IntlProvider>, document.getElementById('root'))\n\t    console.log(error)\n\t})\n"],"sourceRoot":""}