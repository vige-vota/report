{"version":3,"sources":["Utilities.js","map/VoteMap.js","SockJsClient.js","App.js","results/Candidates.js","results/Littlenogroup.js","results/Biggerpartygroup.js","results/Bigger.js","results/Little.js","serviceWorker.js","errors/ErrorBoundary.js","index.js","images/logo.ico"],"names":["getTabs","component","style","ReactDOM","findDOMNode","querySelectorAll","getVotingPaperById","value","result","config","votingPapers","forEach","votingPaper","id","getZoneById","sites","site","getComponentById","groups","group","parties","party","candidates","candidate","getVotesById","votes","electors","getPercent","voteComponent","voteVotingPaper","totalElectors","blankPapers","toFixed","isNaN","parseFloat","getBlankPapers","list","filter","length","getUpdateDate","options","year","month","day","hour","minute","affluence","Date","toLocaleDateString","language","getTitle","level","e","name","defaultMessage","findZonesByFather","zones","list2","list3","zone","push","label","f","g","alphabetic","sort","a","b","findFatherByChild","objects","object","circumscriptions","regions","provinces","cities","VoteMap","state","siteSuggestions","event","results","this","toLowerCase","startsWith","query","setState","circumscription","region","province","city","props","app","refs","value0","locations","value1","flatMap","value2","value3","pop","type","map","setAllZones","counter","renderLocations","placeholder","field","className","onChange","onSelect","selectComplete","suggestions","completeMethod","suggestSites","bind","size","icon","width","resultCircumscriptions","ci","resultRegions","re","resultProvince","pr","resultRegion","Component","SockJsClient","_initStompClient","client","Stomp","over","SockJS","url","heartbeat","outgoing","incoming","Object","keys","includes","heartbeatIncoming","heartbeatOutgoing","debug","_cleanUp","connected","retryCount","subscriptions","clear","_log","msg","console","log","_subscribe","topic","has","sub","subscribe","onMessage","_processMessage","body","headers","destination","subscribeHeaders","set","msgBody","JSON","parse","_unsubscribe","get","unsubscribe","delete","_connect","connect","topics","onConnect","error","onConnectFailure","stack","onDisconnect","autoReconnect","explicitDisconnect","_timeoutId","setTimeout","getRetryInterval","disconnect","clearTimeout","subid","sendMessage","opt_headers","Error","send","Map","nextProps","nextState","Lo","difference","newTopic","oldTopic","React","defaultProps","count","Candidates","rowData","image","src","alt","left","top","position","dataTable","numberVotes","jsonValue","i","lists","activeTabVote","sortField","sortOrder","scrollable","scrollHeight","candidateTemplate","header","columns","values","0","toLocaleTimeString","key","realTimeVotes","history","process","votings","bottom","renderDataTable","Littlenogroup","showCandidates","selectedParty","voting_url","axios","then","response","data","catch","partyTemplate","candidatesTemplate","onClick","vote","votingValues","blankPapersValues","updateDate","updateDateValues","footer","percent","visible","modal","onHide","renderModalHeader","Biggerpartygroup","expandedRows","listsTemplate","rowExpansionTemplate","sumValue","sumPercent","sumPercentBallots","colSpan","footerColumnGroup","namePercent","images","onRowToggle","expander","Bigger","Little","App","activeItem","items","tabvotes","tabs","click","ballots","ref","subtitle","model","onTabChange","voteMap","reset","title","logo","href","paddingRight","isLocalhost","Boolean","window","location","hostname","match","register","navigator","URL","origin","addEventListener","swUrl","fetch","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ErrorBoundary","whiteSpace","toString","errorInfo","componentStack","addLocaleData","locale_en","locale_it","messages","messages_it","split","voting_papers_url","search","render","document","getElementById","papers","locale","module","exports"],"mappings":"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","file":"static/js/main.a48e6324.chunk.js","sourcesContent":["import React from 'react'\nimport { config } from './App'\nimport ReactDOM from 'react-dom'\nimport { language } from './index'\nimport { FormattedMessage } from 'react-intl'\n\nexport const getTabs = (component, style) => {\n    return ReactDOM.findDOMNode(component).querySelectorAll(style + ' .p-menuitem-link')\n}\n\nexport const getVotingPaperById = (value) => {\n\tif (value) {\n\t\tlet result = ''\n    \tconfig.votingPapers.forEach(votingPaper => {\n\t\t\tif (votingPaper.id === value.id)\n\t\t\t\tresult = votingPaper\n\t\t})\n\t\treturn result\n\t} else return ''\n}\n\nexport const getZoneById = (value, sites) => {\n\tif (value) {\n\t\tlet result = ''\n\t\tsites.forEach(site => {\n\t\t\tif (site.id === value)\n\t\t\t\tresult = site\n\t\t})\n\t\treturn result\n\t} else return ''\n}\n\nexport const getComponentById = (value, votingPaper) => {\n\tlet result\n\tif (votingPaper.id === value)\n\t\tresult = votingPaper\n\telse {\n\t\tif (votingPaper.groups)\n\t\t\tvotingPaper.groups.forEach(group => {\n\t\t\t\tif (group.id === value)\n\t\t\t\t\tresult = group\n\t\t\t\t\telse group.parties.forEach(party => {\n\t\t\t\t\t\tif (party.id === value)\n\t\t\t\t\t\t\tresult = party\n\t\t\t\t\t\telse if (party.candidates)\n\t\t\t\t\t\t\tparty.candidates.forEach(candidate => {\n\t\t\t\t\t\t\t\tif (candidate.id === value)\n\t\t\t\t\t\t\t\t\tresult = candidate\n\t\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t})\n\t\tif (votingPaper.parties)\n\t\t\tvotingPaper.parties.forEach(party => {\n\t\t\t\tif (party.id === value)\n\t\t\t\t\tresult = party\n\t\t\t\telse if (party.candidates) \n\t\t\t\t\tparty.candidates.forEach(candidate => {\n\t\t\t\t\t\tif (candidate.id === value)\n\t\t\t\t\t\t\tresult = candidate\n\t\t\t\t\t})\n\t\t\t})\n\t\t}\n\treturn result\n}\n\nexport const getVotesById = (value, votes) => {\n\tlet result = 0\n\tvotes.votingPapers.forEach(votingPaper => {\n\t\tlet component = getComponentById(value, votingPaper)\n\t\tif (component)\n\t\t\tresult = component.electors\n\t})\n\treturn result\n}\n\nexport const getPercent = (value, votes) => {\n\tlet voteComponent\n\tlet voteVotingPaper\n\tlet result = 0\n\tvotes.votingPapers.forEach(votingPaper => {\n\t\tlet component = getComponentById(value, votingPaper)\n\t\tif (component) {\n\t\t\tvoteComponent = component\n\t\t\tvoteVotingPaper = votingPaper\n\t\t}\n\t})\n\tif (voteComponent) {\n\t\tlet totalElectors = voteVotingPaper.electors - voteVotingPaper.blankPapers\n\t\tresult = (voteComponent.electors / totalElectors * 100).toFixed(2)\n\t\tif (isNaN(result))\n\t\t\tresult = 0\n\t}\n\treturn parseFloat(result)\n}\n\nexport const getBlankPapers = (value, votes) => {\n\tlet list = votes.votingPapers.filter(votingPaper => votingPaper.id === value)\n\tif (list.length > 0)\n\t\treturn list[0].blankPapers\n\telse return 0\n}\n\nexport const getUpdateDate = (votes) => {\n\tlet options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }\n\tif (votes.affluence)\n\t\treturn new Date(votes.affluence).toLocaleDateString(language, options)\n\telse return new Date().toLocaleDateString(language, options)\n}\n\nexport const getTitle = (value) => {\n\tif (value) {\n\t\treturn <FormattedMessage id={'level_' + value.level}>\n\t\t\t\t\t{e => e + ' ' + value.name}\n\t\t\t   </FormattedMessage>\n\t} else return <FormattedMessage id={language} defaultMessage='Great Britain' />\n}\n\nexport const setAllZones = (value, votingPaper, list, counter) => {\n\t\tvalue.zones.forEach(zone => { \n\t\t\tif (zone.zones) {\n\t\t\t\tif (votingPaper.type === 'little-nogroup' || counter > 0)\n\t\t\t\t\tlist.push(zone)\n\t\t\t\tsetAllZones(zone, votingPaper, list, counter + 1)\n\t\t\t}\n\t\t})\n}\n\nexport const findZonesByFather = (value, zones, list, list2, list3) => {\n\tzones.forEach(zone => {\n\t\tif (zone.id === value)\n\t\t\tzone.zones.forEach( e => {\n\t\t\t\tlist.push( { label: e.name, value: e.id})\n\t\t\t\tif (list2)\n\t\t\t\t\te.zones.forEach( f => {\n\t\t\t\t\t\tlist2.push( { label: f.name, value: f.id})\n\t\t\t\t\t\tif (list3)\n\t\t\t\t\t\t\tf.zones.forEach( g => {\n\t\t\t\t\t\t\t\tlist3.push( { label: g.name, value: g.id})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t})\n\t\telse findZonesByFather(value, zone.zones, list, list2, list3)\n\t})\n}\n\nexport const alphabetic = (list) => {\n\tlist.sort(function(a, b){\n\t\tif(a.label < b.label || a.name < b.name) { return -1; }\n\t\tif(a.label > b.label || a.name > b.name) { return 1; }\n\t\treturn 0;\n\t})\n}\n\nexport const findFatherByChild = (value, objects, result) => {\n\tobjects.forEach(object => {\n\t\tobject.zones.forEach(zone => {\n\t\tif (zone)\n\t\t\tif (zone.id === value) {\n\t\t\t\tresult.push(object)\n\t\t\t} else {\n\t\t\t\tfindFatherByChild(value, object.zones, result)\t\n\t\t\t}\n\t\t})\n\t})\n}","import React, { Component } from 'react'\nimport './VoteMap.css'\nimport { Dropdown } from 'primereact/dropdown'\nimport { Button } from 'primereact/button'\nimport { AutoComplete } from 'primereact/autocomplete'\nimport { FormattedMessage } from 'react-intl'\nimport { setAllZones, findZonesByFather, findFatherByChild, getZoneById, alphabetic } from '../Utilities'\nimport { locations } from '../index'\n\nlet circumscriptions = []\nlet regions = []\nlet provinces = []\nlet cities = []\n\nclass VoteMap extends Component {\n\n\tconstructor() {\n\t\tsuper()\n\n\t\tthis.state = {\n\t\t\tsiteSuggestions: null\n\t\t}\n\t}\n\n\tsuggestSites(event) {\n\t\tlet results = this.sites.filter((site) => {\n\t\t\treturn site.name.toLowerCase().startsWith(event.query.toLowerCase())\n\t\t})\n\n\t\tthis.setState({ siteSuggestions: results })\n\t}\n\n\treset() {\n\t\tthis.setState({\n\t\t\tcircumscription: null,\n\t\t\tregion: null,\n\t\t\tprovince: null,\n\t\t\tcity: null,\n\t\t\tsite: null\n\t\t})\n\t}\n\n\tselectComplete(value) {\n\t\tthis.props.app.refs.results.setState({ zone: value })\n\t\tlet value0 = locations.zones.filter(zone => {\n\t\t\treturn zone.id === value.id\n\t\t})[0]\n\t\tlet value1 = locations.zones.flatMap(e => e.zones).filter(zone => {\n\t\t\treturn zone.id === value.id\n\t\t})[0]\n\t\tlet value2 = locations.zones.flatMap(e => e.zones).flatMap(e => e.zones).filter(zone => {\n\t\t\treturn zone.id === value.id\n\t\t})[0]\n\t\tlet value3 = locations.zones.flatMap(e => e.zones).flatMap(e => e.zones).flatMap(e => e.zones).filter(zone => {\n\t\t\treturn zone.id === value.id\n\t\t})[0]\n\t\tlet results\n\t\tif (!value2) {\n\t\t\tfindFatherByChild(value3 ? value3.id : null, locations.zones, results = [])\n\t\t\tvalue2 = results.pop()\n\t\t}\n\t\tif (!value1) {\n\t\t\tfindFatherByChild(value2 ? value2.id : value3 ? value3.id : null, locations.zones, results = [])\n\t\t\tvalue1 = results.pop()\n\t\t}\n\t\tif (!value0) {\n\t\t\tfindFatherByChild(value1 ? value1.id : value2 ? value2.id : value3 ? value3.id : null, locations.zones, results = [])\n\t\t\tvalue0 = results.pop()\n\t\t}\n\t\tthis.setState({\n\t\t\tcircumscription: value0 ? value0.id : null,\n\t\t\tregion: value1 ? value1.id : null,\n\t\t\tprovince: value2 ? value2.id : null,\n\t\t\tcity: value3 ? value3.id : null\n\t\t})\n\t}\n\n\trenderLocations() {\n\t\tif (this.props.votingPaper && locations) {\n\t\t\tif (this.props.votingPaper.type === 'little-nogroup')\n\t\t\t\tcircumscriptions = locations.zones.map(city => {\n\t\t\t\t\treturn { label: city.name, value: city.id }\n\t\t\t\t})\n\n\t\t\tif (this.state.circumscription === null || this.props.votingPaper.type !== 'little-nogroup')\n\t\t\t\tregions = locations.zones.flatMap(city => city.zones).map(city => {\n\t\t\t\t\treturn { label: city.name, value: city.id }\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tfindZonesByFather(this.state.circumscription, locations.zones, regions = [], provinces = [], cities = [])\n\n\t\t\tif (this.state.circumscription === null || this.state.region !== null)\n\t\t\t\tif (this.state.region === null)\n\t\t\t\t\tprovinces = locations.zones.flatMap(city => city.zones).flatMap(city => city.zones).map(city => {\n\t\t\t\t\t\treturn { label: city.name, value: city.id }\n\t\t\t\t\t})\n\t\t\t\telse\n\t\t\t\t\tfindZonesByFather(this.state.region, locations.zones, provinces = [], cities = [])\n\n\t\t\tif ((this.state.circumscription === null && this.state.region === null) || this.state.province !== null)\n\t\t\t\tif (this.state.province === null)\n\t\t\t\t\tcities = locations.zones.flatMap(city => city.zones).flatMap(city => city.zones).flatMap(city => city.zones).map(city => {\n\t\t\t\t\t\treturn { label: city.name, value: city.id }\n\t\t\t\t\t})\n\t\t\t\telse findZonesByFather(this.state.province, locations.zones, cities = [])\n\n\t\t\tthis.sites = []\n\t\t\tsetAllZones(locations, this.props.votingPaper, this.sites, 0)\n\t\t\talphabetic(this.sites)\n\t\t\talphabetic(cities)\n\t\t\talphabetic(provinces)\n\t\t\talphabetic(regions)\n\t\t\talphabetic(circumscriptions)\n\t\t}\n\t}\n\n\trender() {\n\t\tthis.renderLocations()\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<FormattedMessage\n\t\t\t\t\tid='app.search'\n\t\t\t\t\tdefaultMessage='Search site...'>\n\t\t\t\t\t{(placeholder) => <AutoComplete field='name' className='searchsites' value={this.state.site} onChange={(e) =>\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tsite: e.value\n\t\t\t\t\t\t})\n\t\t\t\t\t} onSelect={(e) => {\n\t\t\t\t\t\tthis.selectComplete(e.value)\n\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\tsuggestions={this.state.siteSuggestions}\n\t\t\t\t\t\tcompleteMethod={this.suggestSites.bind(this)} size={38} />}\n\t\t\t\t</FormattedMessage>\n\t\t\t\t<Button id='btnSearch' icon='pi pi-search' />\n\t\t\t\t{this.props.votingPaper && this.props.votingPaper.type === 'little-nogroup' && <div className='p-grid'>\n\t\t\t\t\t<div className='p-col-2'>\n\t\t\t\t\t\t<FormattedMessage id='app.circumscription'\n\t\t\t\t\t\t\tdefaultMessage='Circumscription'>\n\t\t\t\t\t\t\t{(city) => <label><b>{city}</b></label>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t\t<FormattedMessage id='app.choosecircumscription'\n\t\t\t\t\t\t\tdefaultMessage='Choose circumscription...'>\n\t\t\t\t\t\t\t{(placeholder) => <Dropdown value={this.state.circumscription} className='city'\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tcircumscription: e.value,\n\t\t\t\t\t\t\t\t\t\tregion: null,\n\t\t\t\t\t\t\t\t\t\tprovince: null,\n\t\t\t\t\t\t\t\t\t\tcity: null,\n\t\t\t\t\t\t\t\t\t\tsite: null\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tthis.props.app.refs.results.setState({ zone: getZoneById(e.value, this.sites) })\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t\t\toptions={circumscriptions}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t</div>\n\t\t\t\t</div>}\n\t\t\t\t<div className='p-grid'>\n\t\t\t\t\t<div className='p-col-fixed' style={{ width: '160px' }}>\n\t\t\t\t\t\t<FormattedMessage id='app.region'\n\t\t\t\t\t\t\tdefaultMessage='Region'>\n\t\t\t\t\t\t\t{(region) => <label><b>{region}</b></label>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t\t<FormattedMessage id='app.chooseregion'\n\t\t\t\t\t\t\tdefaultMessage='Choose region...'>\n\t\t\t\t\t\t\t{(placeholder) => <Dropdown value={this.state.region} className='choose'\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tlet resultCircumscriptions = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(e.value, locations.zones, resultCircumscriptions)\n\t\t\t\t\t\t\t\t\tlet ci = resultCircumscriptions.pop()\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tcircumscription: this.state.circumscription !== null ? this.state.circumscription : ci.id,\n\t\t\t\t\t\t\t\t\t\tregion: e.value,\n\t\t\t\t\t\t\t\t\t\tprovince: null,\n\t\t\t\t\t\t\t\t\t\tcity: null,\n\t\t\t\t\t\t\t\t\t\tsite: null\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tthis.props.app.refs.results.setState({ zone: getZoneById(e.value, this.sites) })\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t\t\toptions={regions}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='p-col-2'>\n\t\t\t\t\t\t<FormattedMessage id='app.province'\n\t\t\t\t\t\t\tdefaultMessage='Province'>\n\t\t\t\t\t\t\t{(province) => <label><b>{province}</b></label>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t\t<FormattedMessage id='app.chooseprovince'\n\t\t\t\t\t\t\tdefaultMessage='Choose province...'>\n\t\t\t\t\t\t\t{(placeholder) => <Dropdown value={this.state.province} className='choose'\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tlet resultRegions = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(e.value, locations.zones, resultRegions)\n\t\t\t\t\t\t\t\t\tlet re = resultRegions.pop()\n\t\t\t\t\t\t\t\t\tlet resultCircumscriptions = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(re.id, locations.zones, resultCircumscriptions)\n\t\t\t\t\t\t\t\t\tlet ci = resultCircumscriptions.pop()\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tcircumscription: this.state.circumscription !== null ? this.state.circumscription : ci.id,\n\t\t\t\t\t\t\t\t\t\tregion: this.state.region !== null ? this.state.region : re.id,\n\t\t\t\t\t\t\t\t\t\tprovince: e.value,\n\t\t\t\t\t\t\t\t\t\tcity: null,\n\t\t\t\t\t\t\t\t\t\tsite: null\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tthis.props.app.refs.results.setState({ zone: getZoneById(e.value, this.sites) })\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t\t\toptions={provinces}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='p-grid'>\n\t\t\t\t\t<div className='p-col-2'>\n\t\t\t\t\t\t<FormattedMessage id='app.city'\n\t\t\t\t\t\t\tdefaultMessage='City'>\n\t\t\t\t\t\t\t{(city) => <label><b>{city}</b></label>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t\t<FormattedMessage id='app.choosecity'\n\t\t\t\t\t\t\tdefaultMessage='Choose city...'>\n\t\t\t\t\t\t\t{(placeholder) => <Dropdown value={this.state.city} className='city'\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tlet resultProvince = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(e.value, locations.zones, resultProvince)\n\t\t\t\t\t\t\t\t\tlet pr = resultProvince.pop()\n\t\t\t\t\t\t\t\t\tlet resultRegion = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(pr.id, locations.zones, resultRegion)\n\t\t\t\t\t\t\t\t\tlet re = resultRegion.pop()\n\t\t\t\t\t\t\t\t\tlet resultCircumscriptions = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(re.id, locations.zones, resultCircumscriptions)\n\t\t\t\t\t\t\t\t\tlet ci = resultCircumscriptions.pop()\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tcircumscription: this.state.circumscription !== null ? this.state.circumscription : ci.id,\n\t\t\t\t\t\t\t\t\t\tregion: this.state.region !== null ? this.state.region : re.id,\n\t\t\t\t\t\t\t\t\t\tprovince: this.state.province !== null ? this.state.province : pr.id,\n\t\t\t\t\t\t\t\t\t\tcity: e.value,\n\t\t\t\t\t\t\t\t\t\tsite: null\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tthis.props.app.refs.results.setState({ zone: getZoneById(e.value, this.sites) })\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t\t\toptions={cities}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default VoteMap","import React from 'react'\nimport SockJS from 'sockjs-client'\nimport Stomp from 'stompjs'\nimport PropTypes from 'prop-types'\nimport Lo from 'lodash'\n\n/**\n * React component for SockJS-client with STOMP messaging protocol.\n *\n * @version 4.1.0\n * @author [lahsivjar] (https://github.com/lahsivjar)\n * @see {@link https://stomp.github.io/|STOMP}\n * @see {@link https://github.com/sockjs/sockjs-client|StompJS}\n */\nclass SockJsClient extends React.Component {\n  static defaultProps = {\n    onConnect: () => {},\n    onDisconnect: () => {},\n    getRetryInterval: (count) => { return 1000 * count },\n    options: {},\n    headers: {},\n    subscribeHeaders: {},\n    autoReconnect: true,\n    debug: false,\n    heartbeat: 10000\n  }\n\n  static propTypes = {\n    /**\n     * HTTP URL of the endpoint to connect.\n     */\n    url: PropTypes.string.isRequired,\n    /**\n     * Additional options to pass to the underlying SockJS constructor.\n     *\n     * @see [SockJS-options](https://github.com/sockjs/sockjs-client#sockjs-client-api)\n     */\n    options: PropTypes.object,\n    /**\n     * Array of topics to subscribe to.\n     */\n    topics: PropTypes.array.isRequired,\n    /**\n     * Callback after connection is established.\n     */\n    onConnect: PropTypes.func,\n    /**\n     * Callback after connection is lost.\n     */\n    onDisconnect: PropTypes.func,\n    /**\n     * Gets called to find the time interval for next retry. Defaults to a function returing retryCount seconds.\n     *\n     * @param {number} retryCount number of retries for the current disconnect\n     */\n    getRetryInterval: PropTypes.func,\n    /**\n     * Callback when a message is recieved.\n     *\n     * @param {(string|Object)} msg message received from server, if JSON format then object\n     * @param {string} topic the topic on which the message was received\n     */\n    onMessage: PropTypes.func.isRequired,\n    /**\n     * Headers that will be passed to the server or broker with STOMP's connection frame.\n     */\n    headers: PropTypes.object,\n    /**\n     * Headers that will be passed when subscribing to a destination.\n     */\n    subscribeHeaders: PropTypes.object,\n    /**\n     * Should the client try to automatically connect in an event of disconnection.\n     */\n    autoReconnect: PropTypes.bool,\n    /**\n     * Enable debugging mode.\n     */\n    debug: PropTypes.bool,\n    /**\n     * Number of milliseconds to send and expect heartbeat messages.\n     */\n    heartbeat: PropTypes.number,\n    /**\n     * Number of milliseconds to expect heartbeat messages\n     */\n    heartbeatIncoming: PropTypes.number,\n    /**\n     * Number of milliseconds to send heartbeat messages\n     */\n    heartbeatOutgoing: PropTypes.number,\n    /**\n     * Callback if connection could not be established\n     */\n    onConnectFailure: PropTypes.func\n  }\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      connected: false,\n      // False if disconnect method is called without a subsequent connect\n      explicitDisconnect: false\n    }\n\n    this.subscriptions = new Map()\n    this.retryCount = 0\n  }\n\n  componentDidMount () {\n    this._connect()\n  }\n\n  componentWillUnmount () {\n    this.disconnect()\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    return false\n  }\n\n  UNSAFE_componentWillReceiveProps (nextProps) {\n    if (this.state.connected) {\n      // Subscribe to new topics\n      Lo.difference(nextProps.topics, this.props.topics)\n        .forEach((newTopic) => {\n          this._log('Subscribing to topic: ' + newTopic)\n          this._subscribe(newTopic)\n        })\n\n      // Unsubscribe from old topics\n      Lo.difference(this.props.topics, nextProps.topics)\n        .forEach((oldTopic) => {\n          this._log('Unsubscribing from topic: ' + oldTopic)\n          this._unsubscribe(oldTopic)\n        })\n    }\n  }\n\n  render () {\n    return null\n  }\n\n  _initStompClient = () => {\n    // Websocket held by stompjs can be opened only once\n    this.client = Stomp.over(new SockJS(this.props.url, null, this.props.options))\n\n    this.client.heartbeat.outgoing = this.props.heartbeat\n    this.client.heartbeat.incoming = this.props.heartbeat\n\n    if (Object.keys(this.props).includes('heartbeatIncoming')) {\n      this.client.heartbeat.incoming = this.props.heartbeatIncoming\n    }\n    if (Object.keys(this.props).includes('heartbeatOutgoing')) {\n      this.client.heartbeat.outgoing = this.props.heartbeatOutgoing\n    }\n    if (!this.props.debug) {\n      this.client.debug = () => {}\n    }\n  }\n\n  _cleanUp = () => {\n    this.setState({ connected: false })\n    this.retryCount = 0\n    this.subscriptions.clear()\n  }\n\n  _log = (msg) => {\n    if (this.props.debug) {\n      console.log(msg)\n    }\n  }\n\n  _subscribe = (topic) => {\n    if (!this.subscriptions.has(topic)) {\n      let sub = this.client.subscribe(topic, (msg) => {\n        this.props.onMessage(this._processMessage(msg.body), msg.headers.destination)\n      }, this.props.subscribeHeaders)\n      this.subscriptions.set(topic, sub)\n    }\n  }\n\n  _processMessage = (msgBody) => {\n    try {\n      return JSON.parse(msgBody)\n    } catch (e) {\n      return msgBody\n    }\n  }\n\n  _unsubscribe = (topic) => {\n    let sub = this.subscriptions.get(topic)\n    sub.unsubscribe()\n    this.subscriptions.delete(topic)\n  }\n\n  _connect = () => {\n    this._initStompClient()\n    this.client.connect(this.props.headers, () => {\n      this.setState({ connected: true })\n      this.props.topics.forEach((topic) => {\n        this._subscribe(topic)\n      })\n      this.props.onConnect()\n    }, (error) => {\n      if (error) {\n        if (Object.keys(this.props).includes('onConnectFailure')) {\n          this.props.onConnectFailure(error)\n        } else {\n          this._log(error.stack)\n        }\n      }\n      if (this.state.connected) {\n        this._cleanUp()\n        // onDisconnect should be called only once per connect\n        this.props.onDisconnect()\n      }\n      if (this.props.autoReconnect && !this.state.explicitDisconnect) {\n        this._timeoutId = setTimeout(this._connect, this.props.getRetryInterval(this.retryCount++))\n      }\n    })\n  }\n\n  /**\n   * Connect to the server if not connected. Under normal circumstances component\n   * will automatically try to connect to server. This method is mostly useful\n   * after component is explicitly disconnected via {@link SockJsClient#disconnect}.\n   *\n   * @public\n   */\n  connect = () => {\n    this.setState({ explicitDisconnect: false })\n    if (!this.state.connected) {\n      this._connect()\n    }\n  }\n\n  /**\n   * Disconnect STOMP client and disable all reconnect.\n   *\n   * @public\n   */\n  disconnect = () => {\n    // On calling disconnect explicitly no effort will be made to reconnect\n    // Clear timeoutId in case the component is trying to reconnect\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId)\n      this._timeoutId = null\n    }\n    this.setState({ explicitDisconnect: true })\n    if (this.state.connected) {\n      this.subscriptions.forEach((subid, topic) => {\n        this._unsubscribe(topic)\n      })\n      this.client.disconnect(() => {\n        this._cleanUp()\n        this.props.onDisconnect()\n        this._log('Stomp client is successfully disconnected!')\n      })\n    }\n  }\n\n  /**\n   * Send message to the specified topic.\n   *\n   * @param {string} topic target topic to send message\n   * @param {string} msg message to send\n   * @param {Object} [opt_headers={}] additional headers for underlying STOMP client\n   * @public\n   */\n  sendMessage = (topic, msg, opt_headers = {}) => {\n    if (this.state.connected) {\n      this.client.send(topic, opt_headers, msg)\n    } else {\n      throw new Error('Send error: SockJsClient is disconnected')\n    }\n  }\n}\n\nexport default SockJsClient","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport './App.css'\nimport { TabMenu } from 'primereact/tabmenu'\nimport 'primeflex/primeflex.css'\nimport VoteMap from './map/VoteMap';\nimport Littlenogroup from './results/Littlenogroup';\nimport Biggerpartygroup from './results/Biggerpartygroup';\nimport Bigger from './results/Bigger';\nimport Little from './results/Little';\nimport { getTabs, getVotingPaperById } from './Utilities';\nimport 'primereact/resources/themes/nova-light/theme.css'\nimport 'primereact/resources/primereact.min.css'\nimport 'primeicons/primeicons.css'\nimport logo from './images/logo.ico'\nimport {history, language} from './index'\n\nexport var config\n\nclass App extends Component {\n\n    constructor(data) {\n        super(data)\n        config = data.config\n        let activeItem = {}\n        if (config.votingPapers && config.votingPapers[0])\n        \tactiveItem = { id: config.votingPapers[0].id, label: config.votingPapers[0].name }\n        this.state = {\n            items: [\n                ],\n            tabvotes: [\n            \t{ id: 0, label: <FormattedMessage id='app.tab.ballots' defaultMessage='BALLOTS' /> },\n            \t{ id: 1, label: <FormattedMessage id='app.tab.voters' defaultMessage='VOTERS' /> }\n                ],\n            activeItem: activeItem,\n            activeTabVote: { id: 0, label: <FormattedMessage id='app.tab.ballots' defaultMessage='BALLOTS' /> },\n        }\n        config.votingPapers.map((votingPaper) => \n        \t\tthis.state.items.push({ id: votingPaper.id, label: votingPaper.name })\n        )\n    }\n\n    componentDidMount() {\n\t\tconst tabs = getTabs(this, '.vote-tabmenu')\n\t\tif (tabs && tabs[0]) {\n\t\t\ttabs[0].click()\n\t\t\tif (history) {\n\t\t\t\tconst tabvotes = getTabs(this, '.vote-tabvotes')\n\t\t\t\ttabvotes[0].click()\n\t\t\t}\n\t\t}\n    }\n\n    render() {\n    \tlet results = ''\n    \tlet ballots = ''\n        if (this.state.votingPaper) {\n        \tif (this.state.votingPaper.type === 'bigger-partygroup')\n        \t\tresults = <Biggerpartygroup ref='results' votingPaper={this.state.votingPaper} app={this} />\n        \telse if (this.state.votingPaper.type === 'little')\n        \t\tresults = <Little ref='results' votingPaper={this.state.votingPaper} app={this} />\n        \telse if (this.state.votingPaper.type === 'bigger')\n        \t\tresults = <Bigger ref='results' votingPaper={this.state.votingPaper} app={this} />\n        \telse if (this.state.votingPaper.type === 'little-nogroup')\n        \t\tresults = <Littlenogroup ref='results' votingPaper={this.state.votingPaper} app={this} />\n        }\n    \tlet subtitle = ''\n    \tif (history) {\n    \t\tlet options = { year: 'numeric', month: 'long', day: 'numeric' }\n    \t\tsubtitle = <FormattedMessage\n\t\t\t\t\t\t\tid='app.subtitle'\n\t\t\t\t\t\t\tvalues = {{0: new Date(history).toLocaleDateString(language, options)}}\n\t\t\t\t\t\t\tdefaultMessage=' for {0}' />\n\t\t\tballots = <TabMenu ref='tabVotes' className='vote-tabvotes' model={this.state.tabvotes} activeItem={this.state.activeTabVote} onTabChange={(e) => {\n            \t\tthis.setState({ activeTabVote: e.value })\n            \t\tthis.refs.voteMap.reset()\n            \t\tif (this.refs.results)\n            \t\t\tthis.refs.results.reset()\n            \t\t}\n            \t} />\n    \t}\n\t\treturn (\n            <div className='html navbar-is-fixed-top cbp-spmenu-push excludeIE10 enhanced'>\n\t\t\t\t<div className='content-section implementation'>\n                \t<div className='second-row'>\n        \t\t\t\t<div className='container container-live'>\n                     \t\t<div className='box-live'>\n                     \t\t\t<div className='img-responsive inmlive' />\n                     \t\t</div>\n                     \t\t<div className='box-title'>\n                     \t\t\t<FormattedMessage\n                     \t\t\t\tid='app.title'\n                     \t\t\t\tdefaultMessage='Affluence and Results'>\n                     \t\t\t\t\t{(title) => <p><strong>{title}{subtitle}</strong></p>}\n                     \t\t\t</FormattedMessage>\n                     \t\t</div>\n                     \t\t<div className='powered'>\n                     \t\t\t<img alt='logo' className='logo' src={logo} />\n             \t\t\t\t\t<FormattedMessage\n             \t\t\t\t\tid='app.powered'\n             \t\t\t\t\t\tdefaultMessage='Powered by'>\n         \t\t\t\t\t\t\t{(title) => <p>{title} <a href='http://www.vige.it'>Vige</a></p>}\n         \t\t\t\t\t\t\t</FormattedMessage>\n         \t\t\t\t\t</div>\n                     \t</div>\n                    </div>\n                \t<TabMenu ref='tabMenu' className='vote-tabmenu' model={this.state.items} activeItem={this.state.activeItem} onTabChange={(e) => {\n                \t\tthis.setState({ activeItem: e.value,\n                \t\t\t\t\tvotingPaper: getVotingPaperById(e.value) })\n                \t\tthis.refs.voteMap.reset()\n                \t\tif (this.refs.results)\n                \t\t\tthis.refs.results.reset()\n                \t\t}\n                \t} />\n                \n                \t{ballots}\n                \t\n                    <div className='my-content p-grid'>\n                        <div className='p-col-fixed' style={{ width: '360px', paddingRight: '40px' }}>\n                        \t<VoteMap ref='voteMap' votingPaper={this.state.votingPaper} app={this} />\n                        </div>\n                        <div className='p-col'>\n                            {results}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport './Candidates.css'\nimport { getVotesById } from '../Utilities';\nimport { language, history } from '../index'\nimport SockJsClient from '../SockJsClient'\n\nexport class Candidates extends Component {\n\n    candidateTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n    \n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.props.party) {\n        \tlet values = this.props.party.candidates\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, this.props.votes[this.props.votes.length -1])\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes\n        \t\t}\n        \t\tfor (let i = 0; i< this.props.votes.length; i++)\n        \t\t\tjsonValue['votes'+i] = getVotesById(e.id, this.props.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let lists = <FormattedMessage id='app.table.candidate' defaultMessage='Candidate' />\n            let votes = <FormattedMessage id='app.table.preferences' defaultMessage='Preferences' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px'\n            \t\t\t className='candidates-table'>\n        \t\t\t\t\t<Column field='image' body={this.candidateTemplate} style={{width:'14%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} style={{width:'70%'}} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.props.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.numbers' defaultMessage='hours {0}' values={{0: new Date(this.props.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'votes'+i} header={header} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\t\tscrollable={true} scrollHeight='450px'\n\t\t\t \t\t\t\tclassName='candidates-table'>\n\t\t\t\t\t\t\t\t<Column field='image' body={this.candidateTemplate} style={{width:'14%'}} />\n\t\t\t\t\t\t\t\t<Column field='name' header={lists} style={{width:'50%'}} />\n\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \t\tif (this.props.party) {\n    \t    \tlet realTimeVotes = ''\n    \t        if (!history)\n    \t            realTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n    \t            \t\t\t\t\tonMessage={(msg) => { \n    \t            \t\t\t\t\t\tthis.setState({\n    \t            \t\t\t\t\t\t\tvotes: msg.votings\n    \t            \t\t\t\t\t\t})\n    \t            \t\t\t\t}} />\n    \t\t\treturn (\n    \t\t\t\t<div className='tableContent'>\n            \t\t\t{realTimeVotes}\n    \t\t\t\t\t<div className='party-for-candidates'>\n    \t\t\t\t\t\t<img src={`data:image/jpeg;base64,${this.props.party.image}`}\n            \t\t\t\t\t\talt={this.props.party.name} \n            \t\t\t\t\t\tstyle={{ width:'66px', left:'2%', bottom:'6px', position:'relative' }} />\n            \t\t\t\t\t<div className='title-for-candidates'>{this.props.party.name}</div>\n    \t\t\t\t\t</div>\n    \t\t\t\t\t{this.renderDataTable()}\n    \t\t\t\t</div>\n    \t\t\t)\n    \t\t} else return ''\n    }\n}\n\nexport default Candidates","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { Button } from 'primereact/button'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport './Results.css'\nimport './Littlenogroup.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\n\nexport class Littlenogroup extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n        \tzone: null,\n        \tshowCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({votes: response.data.votings})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div id='headEnti'>\n        \t\t\t<h2>{getTitle(this.state.zone)}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.props.app.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\t\n\treset() {\n\t\tthis.setState({\n\t\t\tzone: null\n\t\t})\n\t}\n\n    render() {\n    \tlet realTimeVotes = ''\n    \tlet dataTable = ''\n    \tif (this.state.votes && this.props.app.state.votingPaper) {\n        \tif (!history)\n        \t    realTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n        \t            \t\t\tonMessage={(msg) => { \n        \t            \t\t\t\tthis.setState({\n        \t            \t\t\t\t\tvotes: msg.votings\n        \t            \t\t\t\t})\n        \t            \t\t}} />\n    \t\tlet vote = this.state.votes[this.state.votes.length -1]\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n    \t\tlet votingValues = getVotesById(this.props.app.state.votingPaper.id, vote)\n    \t\tlet blankPapersValues = getBlankPapers(this.props.app.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n    \t\tlet updateDateValues = getUpdateDate(vote)\n    \t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp; \n    \t\t\t\t\t\t{blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n    \t\t\t\t\t\t{updateDate} <span className='footer-value'>{updateDateValues}</span>\n    \t\t\t\t\t </div>\n    \t\tlet values = this.props.app.state.votingPaper.parties\n    \t\tlet value = values.map((e) => {\n    \t\t\t\tlet numberVotes = getVotesById(e.id, vote)\n                \tlet percent = getPercent(e.id, vote)\n            \t\tlet jsonValue = {\n            \t\t\tid: e.id,\n            \t\t\tname: e.name,\n            \t\t\timage: e.image,\n            \t\t\tvotes: numberVotes,\n            \t\t\tpercent: percent\n            \t\t}\n            \t\tfor (let i = 0; i< this.state.votes.length; i++)\n            \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n            \t\treturn jsonValue\n    \t\t})\n    \t\tlet lists = <FormattedMessage id='app.table.lists' defaultMessage='Lists' />\n    \t\tlet votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n    \t\t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}>\n    \t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n    \t\t\t\t\t\t<Column field='name' header={lists} body={this.candidatesTemplate} style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n    \t\t\t\t\t</DataTable>\n    \t\telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tscrollable={true} scrollHeight='450px' footer={footer}>\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} body={this.candidatesTemplate} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n    \t\t}\n    \t}\n        return (\n        \t<div className='tableContent'>\n    \t\t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle(this.state.zone)}</h3>\n        \t\t</div>\n            \t{dataTable}\n            \t<Dialog visible={this.state.showCandidates} \n        \t\t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n        \t\t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n        \t\t\t<Candidates zone={this.state.zone} party={this.state.selectedParty} \n        \t\t\t\tvotes={this.state.votes} app={this.props.app} />\n        \t\t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Littlenogroup","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { ColumnGroup } from 'primereact/columngroup'\nimport { Button } from 'primereact/button'\nimport { Row } from 'primereact/row'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport './Results.css'\nimport './Biggerpartygroup.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\n\nexport class Biggerpartygroup extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n        \tzone: null,\n            expandedRows: null,\n            showCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({votes: response.data.votings})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.listsTemplate = this.listsTemplate.bind(this);\n        this.rowExpansionTemplate = this.rowExpansionTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div id='headEnti'>\n        \t\t\t<h2>{getTitle(this.state.zone)}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.props.app.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n    \n    rowExpansionTemplate(data) {\n    \tlet dataTable = ''\n        if (this.state.votes && this.props.app.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n            let values = getComponentById(data.id, this.props.app.state.votingPaper).parties\n            let sumValue = 0\n            let sumPercent = 0\n            let sumPercentBallots = []\n            let value = values.map((e) => {\n                let numberVotes = getVotesById(e.id, vote)\n                sumValue += numberVotes\n            \tlet percent = getPercent(e.id, vote)\n                sumPercent += percent\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++) {\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\t\tsumPercentBallots += jsonValue['percent'+i]\n        \t\t}\n        \t\treturn jsonValue\n            })\n            let footer = ''\n            if (values.length > 1) {\n        \t\tlet votings =  <FormattedMessage id='app.table.totallists' defaultMessage='Total lists' />\n            \tif (this.props.app.state.activeTabVote.id === 0)\n            \t\tfooter = <ColumnGroup>\n            \t\t\t\t\t\t<Row>\n            \t\t\t\t\t\t\t<Column colSpan={2} />\n            \t\t\t\t\t\t\t<Column footer={votings} />\n            \t\t\t\t\t\t\t<Column footer={sumValue} />\n            \t\t\t\t\t\t\t<Column footer={sumPercent} />\n            \t\t\t\t\t\t</Row>\n            \t\t\t\t\t </ColumnGroup>\n            \telse {\n        \t\t\tlet columns = []\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} footer={sumPercentBallots[i]} />)\n        \t\t\tfooter = <ColumnGroup>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Column colSpan={2} />\n\t\t\t\t\t\t\t\t\t\t<Column footer={votings} />\n\t\t\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t</ColumnGroup>\n            \t}\n            }\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n            \t\t\t footerColumnGroup={footer} className='biggernogroup-sub-header'>\n            \t\t\t\t<Column />\n            \t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' style={{width: '70%' }} body={this.candidatesTemplate} />\n        \t\t\t\t\t<Column field='votes' />\n        \t\t\t\t\t<Column field='percent' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n            else {\n        \t\t\tlet columns = []\n        \t\t\tlet namePercent = 0\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} style={{width:'10%'}} />)\n            \t\tnamePercent = 80 - this.state.votes.length * 10\n        \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tfooterColumnGroup={footer} className='biggernogroup-sub-header'>\n\t\t\t\t\t\t\t<Column style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' body={this.candidatesTemplate} style={{width: namePercent + '%'}} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n            }\n        }\n        return dataTable\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\n    listsTemplate(rowData) {\n    \tlet images = ''\n    \tlet component = getComponentById(rowData.id, this.props.app.state.votingPaper)\n    \timages = component.parties.map(e => e.image ? <img key={e.id} src={`data:image/jpeg;base64,${e.image}`} \n\t\t\t\t\t\t\t\t  alt={rowData.name} style={{ width:'10%' }} /> : '')\n        return <div>{rowData.name} \n        \t\t  <div className='border-images'>\n        \t\t\t <span className='party-images'>{images}</span>\n        \t\t  </div>\n        \t   </div>\n    }\n\t\n\treset() {\n\t\tthis.setState({\n\t\t\tzone: null\n\t\t})\n\t}\n\t\n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.state.votes && this.props.app.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n        \tlet values = this.props.app.state.votingPaper.groups\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, vote)\n            \tlet percent = getPercent(e.id, vote)\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n\t\t\tlet votingValues = getVotesById(this.props.app.state.votingPaper.id, vote)\n\t\t\tlet blankPapersValues = getBlankPapers(this.props.app.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n            let updateDateValues = getUpdateDate(vote)\n\t\t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp;\n\t\t\t\t\t\t\t  {blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n\t    \t\t\t\t\t  {updateDate} <span className='footer-value'>{updateDateValues}</span>\n\t\t\t\t\t\t </div>\n            let lists = <FormattedMessage id='app.table.candidatesandlists' defaultMessage='Candidates and Lists' />\n            let votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}\n        \t\t\t\t expandedRows={this.state.expandedRows} \n        \t\t\t\t onRowToggle={(e) => this.setState({expandedRows:e.data})}\n        \t\t\t\t rowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\t className='biggernogroup-table'>\n            \t\t\t\t<Column field='id' expander/>\n        \t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} body={this.listsTemplate} className='padding-name' style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tlet namePercent = 0\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n\t\t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n        \t\t}\n    \t\t\tnamePercent = 80 - this.state.votes.length * 10\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n            \t\t\tscrollable={true} scrollHeight='450px' footer={footer}\n\t\t\t \t\t\texpandedRows={this.state.expandedRows} \n\t\t\t \t\t\tonRowToggle={(e) => this.setState({expandedRows:e.data})}\n\t\t\t \t\t\trowExpansionTemplate={this.rowExpansionTemplate}\n\t\t\t \t\t\tclassName='biggernogroup-table'>\n\t\t\t\t\t\t\t<Column field='id' expander style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} className='padding-name' style={{width: namePercent + '%' }} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \tlet realTimeVotes = ''\n        if (!history)\n        \trealTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n        \t\t\t\t\t\tonMessage={(msg) => { \n        \t\t\t\t\t\t\tthis.setState({\n        \t\t\t\t\t\t\t\tvotes: msg.votings\n        \t\t\t\t\t\t\t})\n        \t\t\t\t\t}} />\n        return (\n        \t<div className='tableContent'>\n    \t\t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle(this.state.zone)}</h3>\n        \t\t</div>\n            \t{this.renderDataTable()}\n            \t<Dialog visible={this.state.showCandidates} \n        \t\t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n        \t\t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n        \t\t\t<Candidates zone={this.state.zone} party={this.state.selectedParty} \n        \t\t\t\tvotes={this.state.votes} app={this.props.app} />\n        \t\t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Biggerpartygroup","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { ColumnGroup } from 'primereact/columngroup'\nimport { Button } from 'primereact/button'\nimport { Row } from 'primereact/row'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport './Results.css'\nimport './Bigger.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\n\nexport class Bigger extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n        \tzone: null,\n            expandedRows: null,\n            showCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({votes: response.data.votings})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.listsTemplate = this.listsTemplate.bind(this);\n        this.rowExpansionTemplate = this.rowExpansionTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div>\n        \t\t\t<h2>{getTitle(this.state.zone)}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.props.app.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n    \n    rowExpansionTemplate(data) {\n    \tlet dataTable = ''\n        if (this.state.votes && this.props.app.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n            let values = getComponentById(data.id, this.props.app.state.votingPaper).parties\n            let sumValue = 0\n            let sumPercent = 0\n            let sumPercentBallots = []\n            let value = values.map((e) => {\n                let numberVotes = getVotesById(e.id, vote)\n                sumValue += numberVotes\n            \tlet percent = getPercent(e.id, vote)\n                sumPercent += percent\n                let jsonValue = {\n                \tid: e.id,\n                \tname: e.name,\n                \timage: e.image,\n                \tvotes: numberVotes,\n                \tpercent: percent\n                }\n        \t\tfor (let i = 0; i< this.state.votes.length; i++) {\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\t\tsumPercentBallots += jsonValue['percent'+i]\n        \t\t}\n        \t\treturn jsonValue\n            })\n            let footer = ''\n            if (values.length > 1) {\n        \t\tlet votings =  <FormattedMessage id='app.table.totallists' defaultMessage='Total lists' />\n            \tif (this.props.app.state.activeTabVote.id === 0)\n            \t\tfooter = <ColumnGroup>\n            \t\t\t\t\t\t<Row>\n            \t\t\t\t\t\t\t<Column colSpan={2} />\n            \t\t\t\t\t\t\t<Column footer={votings} />\n            \t\t\t\t\t\t\t<Column footer={sumValue} />\n            \t\t\t\t\t\t\t<Column footer={sumPercent} />\n            \t\t\t\t\t\t</Row>\n            \t\t\t\t </ColumnGroup>\n            \telse {\n        \t\t\tlet columns = []\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} footer={sumPercentBallots[i]} />)\n            \t\tfooter = <ColumnGroup>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Column colSpan={2} />\n\t\t\t\t\t\t\t\t\t\t<Column footer={votings} />\n\t\t\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t </ColumnGroup>\n            \t}\n            }\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n            \t\t\t footerColumnGroup={footer} className='bigger-sub-header'>\n            \t\t\t\t<Column />\n            \t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' style={{width: '70%' }} body={this.candidatesTemplate} />\n        \t\t\t\t\t<Column field='votes' />\n        \t\t\t\t\t<Column field='percent' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n            else {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} style={{width:'10%'}} />)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\t footerColumnGroup={footer} className='bigger-sub-header'>\n\t\t\t\t\t\t\t<Column style={{width: '6%' }} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' body={this.candidatesTemplate} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n            }\n        }\n        return dataTable\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\n    listsTemplate(rowData) {\n    \tlet images = ''\n    \tlet component = getComponentById(rowData.id, this.props.app.state.votingPaper)\n    \timages = component.parties.map(e => e.image ? <img key={e.id} src={`data:image/jpeg;base64,${e.image}`} \n\t\t\t\t\t\t\t\t  alt={rowData.name} style={{ width:'10%' }} /> : '')\n        return <div>{rowData.name} \n        \t\t  <div className='border-images'>\n        \t\t\t <span className='party-images'>{images}</span>\n        \t\t  </div>\n        \t   </div>\n    }\n\t\n\treset() {\n\t\tthis.setState({\n\t\t\tzone: null\n\t\t})\n\t}\n\t\n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.state.votes && this.props.app.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n        \tlet values = this.props.app.state.votingPaper.groups\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, vote)\n            \tlet percent = getPercent(e.id, vote)\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n\t\t\tlet votingValues = getVotesById(this.props.app.state.votingPaper.id, vote)\n\t\t\tlet blankPapersValues = getBlankPapers(this.props.app.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n            let updateDateValues = getUpdateDate(vote)\n\t\t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp;\n\t\t\t\t\t\t\t  {blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n\t    \t\t\t\t\t  {updateDate} <span className='footer-value'>{updateDateValues}</span>\n\t\t\t\t\t\t </div>\n            let lists = <FormattedMessage id='app.table.governersandlists' defaultMessage='Candidates and Lists' />\n            let votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}\n        \t\t\t\t expandedRows={this.state.expandedRows} \n        \t\t\t\t onRowToggle={(e) => this.setState({expandedRows:e.data})}\n        \t\t\t\t rowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\t className='bigger-table'>\n            \t\t\t\t<Column field='id' expander/>\n        \t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} body={this.listsTemplate} style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tscrollable={true} scrollHeight='450px' footer={footer}\n\t\t\t \t\t\texpandedRows={this.state.expandedRows} \n\t\t\t \t\t\tonRowToggle={(e) => this.setState({expandedRows:e.data})}\n\t\t\t \t\t\trowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\tclassName='bigger-table'>\n\t\t\t\t\t\t\t<Column field='id' expander style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \tlet realTimeVotes = ''\n    \tif (!history)\n    \t\trealTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n    \t\t\t\t\t\t\tonMessage={(msg) => {\n\t\t\t\t\t\t\t\t\tconsole.log(msg)\n    \t\t\t\t\t\t\t\tthis.setState({\n    \t\t\t\t\t\t\t\t\tvotes: msg.votings\n    \t\t\t\t\t\t\t\t})\n    \t\t\t\t\t\t}} />\n        return (\n        \t<div className='tableContent'>\n        \t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle(this.state.zone)}</h3>\n        \t\t</div>\n            \t{this.renderDataTable()}\n            \t<Dialog visible={this.state.showCandidates} \n            \t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n            \t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n            \t\t<Candidates zone={this.state.zone} party={this.state.selectedParty} \n            \t\t\tvotes={this.state.votes} app={this.props.app} />\n            \t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Bigger","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { ColumnGroup } from 'primereact/columngroup'\nimport { Button } from 'primereact/button'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport { Row } from 'primereact/row'\nimport './Results.css'\nimport './Little.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\n\nexport class Little extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n        \tzone: null,\n            expandedRows: null,\n            showCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({votes: response.data.votings})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.listsTemplate = this.listsTemplate.bind(this);\n        this.rowExpansionTemplate = this.rowExpansionTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div id='headEnti'>\n        \t\t\t<h2>{getTitle(this.state.zone)}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.props.app.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n    \n    rowExpansionTemplate(data) {\n    \tlet dataTable = ''\n        if (this.state.votes && this.props.app.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n            let values = getComponentById(data.id, this.props.app.state.votingPaper).parties\n            let sumValue = 0\n            let sumPercent = 0\n            let sumPercentBallots = []\n            let value = values.map((e) => {\n                let numberVotes = getVotesById(e.id, vote)\n                sumValue += numberVotes\n            \tlet percent = getPercent(e.id, vote)\n                sumPercent += percent\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++) {\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\t\tsumPercentBallots += jsonValue['percent'+i]\n        \t\t}\n        \t\treturn jsonValue\n            })\n            let footer = ''\n            if (values.length > 1) {\n        \t\tlet votings =  <FormattedMessage id='app.table.totallists' defaultMessage='Total lists' />\n            \tif (this.props.app.state.activeTabVote.id === 0)\n            \t\tfooter = <ColumnGroup>\n            \t\t\t\t\t\t<Row>\n            \t\t\t\t\t\t\t<Column colSpan={2} />\n            \t\t\t\t\t\t\t<Column footer={votings} />\n            \t\t\t\t\t\t\t<Column footer={sumValue} />\n            \t\t\t\t\t\t\t<Column footer={sumPercent} />\n            \t\t\t\t\t\t</Row>\n            \t\t\t\t </ColumnGroup>\n            \telse {\n        \t\t\tlet columns = []\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} footer={sumPercentBallots[i]} />)\n            \t\tfooter = <ColumnGroup>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Column colSpan={2} />\n\t\t\t\t\t\t\t\t\t\t<Column footer={votings} />\n\t\t\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t </ColumnGroup>\n            \t}\n            }\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n            \t\t\t footerColumnGroup={footer} className='little-sub-header'>\n            \t\t\t\t<Column />\n            \t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' style={{width: '70%' }} body={this.candidatesTemplate} />\n        \t\t\t\t\t<Column field='votes' />\n        \t\t\t\t\t<Column field='percent' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n            else {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} style={{width:'10%'}} />)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\t footerColumnGroup={footer} className='little-sub-header'>\n\t\t\t\t\t\t\t<Column style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' style={{width: '50%' }} body={this.candidatesTemplate} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n            }\n        }\n        return dataTable\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\n    listsTemplate(rowData) {\n    \tlet images = ''\n    \tlet component = getComponentById(rowData.id, this.props.app.state.votingPaper)\n    \timages = component.parties.map(e => e.image ? <img key={e.id} src={`data:image/jpeg;base64,${e.image}`} \n\t\t\t\t\t\t\t\t  alt={rowData.name} style={{ width:'10%' }} /> : '')\n        return <div>{rowData.name} \n        \t\t  <div className='border-images'>\n        \t\t\t <span className='party-images'>{images}</span>\n        \t\t  </div>\n        \t   </div>\n    }\n\t\n\treset() {\n\t\tthis.setState({\n\t\t\tzone: null\n\t\t})\n\t}\n\t\n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.state.votes && this.props.app.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n        \tlet values = this.props.app.state.votingPaper.groups\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, vote)\n            \tlet percent = getPercent(e.id, vote)\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n\t\t\tlet votingValues = getVotesById(this.props.app.state.votingPaper.id, vote)\n\t\t\tlet blankPapersValues = getBlankPapers(this.props.app.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n        \tlet updateDateValues = getUpdateDate(vote)\n\t\t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp;\n\t\t\t\t\t\t\t  {blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n\t    \t\t\t\t\t  {updateDate} <span className='footer-value'>{updateDateValues}</span>\n\t\t\t\t\t\t </div>\n            let lists = <FormattedMessage id='app.table.premiersandlists' defaultMessage='Premiers and Lists' />\n            let votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}\n        \t\t\t\t expandedRows={this.state.expandedRows} \n        \t\t\t\t onRowToggle={(e) => this.setState({expandedRows:e.data})}\n        \t\t\t\t rowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\t className='little-table'>\n            \t\t\t\t<Column field='id' expander/>\n        \t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} body={this.listsTemplate} style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tscrollable={true} scrollHeight='450px' footer={footer}\n\t\t\t \t\t\texpandedRows={this.state.expandedRows} \n\t\t\t \t\t\tonRowToggle={(e) => this.setState({expandedRows:e.data})}\n\t\t\t \t\t\trowExpansionTemplate={this.rowExpansionTemplate}\n\t\t\t \t\t\tclassName='little-table'>\n\t\t\t\t\t\t\t<Column field='id' expander style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} style={{width: '50%' }} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \tlet realTimeVotes = ''\n\t    if (!history)\n\t        realTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n\t            \t\t\t\tonMessage={(msg) => {\n\t            \t\t\t\t\tthis.setState({\n\t            \t\t\t\t\t\tvotes: msg.votings\n\t            \t\t\t\t\t})\n\t            \t\t\t}} />\n        return (\n        \t<div className='tableContent'>\n    \t\t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle(this.state.zone)}</h3>\n        \t\t</div>\n            \t{this.renderDataTable()}\n            \t<Dialog visible={this.state.showCandidates} \n        \t\t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n        \t\t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n        \t\t\t<Candidates zone={this.state.zone} party={this.state.selectedParty} \n        \t\t\t\tvotes={this.state.votes} app={this.props.app} />\n        \t\t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Little","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport './ErrorBoundary.css'\n\nclass ErrorBoundary extends React.Component {\n  \n  render() {\n      // Error path\n\t  return (\n        <div className='error-boundary'>\n          <h2><FormattedMessage\n          \t\tid='app.error'\n          \t\tdefaultMessage='Something went wrong.' />\n          </h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.props.error && this.props.error.toString()}\n            <br />\n            {this.props.errorInfo.componentStack}\n          </details>\n        </div>\n      )\n  }  \n}\n\nexport default ErrorBoundary","import React from 'react'\n\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {IntlProvider, addLocaleData} from 'react-intl'\nimport * as serviceWorker from './serviceWorker'\nimport locale_en from 'react-intl/locale-data/en'\nimport locale_it from 'react-intl/locale-data/it'\nimport messages_it from './translations/it.json'\nimport axios from 'axios'\nimport {ProgressSpinner} from 'primereact/progressspinner'\nimport ErrorBoundary from './errors/ErrorBoundary'\n\naddLocaleData([...locale_en, ...locale_it])\n\nconst messages = {\n    'it': messages_it\n}\n\nexport const language = navigator.language.split(/[-_]/)[0]  // language without region code\nexport var history = ''\nexport var locations = ''\n\nlet voting_papers_url = process.env.REACT_APP_VOTING_PAPERS_URL\nlet cities_generator_url = process.env.REACT_APP_CITIES_GENERATOR_URL\nif (window.location.search.startsWith('?date=')) {\n\thistory = window.location.search.split('=')[1]\n\tvoting_papers_url = process.env.REACT_APP_HISTORY_VOTING_PAPERS_URL + '/' + history\n}\nReactDOM.render(<ProgressSpinner/>, document.getElementById('root'))\naxios\n\t.get(voting_papers_url)\n\t.then(function(papers) {\n\t\taxios\n\t\t\t.get(cities_generator_url)\n\t\t\t.then(function (cities) {\n\t\t\t\tlocations = cities.data\n\t    \t\tReactDOM.render(<IntlProvider locale={language} messages={messages[language]}><App config={papers.data} /></IntlProvider>, document.getElementById('root'))\n\t    \t\t// If you want your app to work offline and load faster, you can change\n\t    \t\t// unregister() to register() below. Note this comes with some pitfalls.\n\t    \t\t// Learn more about service workers: http://bit.ly/CRA-PWA\n\t\t\t\tserviceWorker.register()\n\t\t\t})\n\t})\n\t.catch(function(error) {\n\t\tReactDOM.render(<IntlProvider locale={language} messages={messages[language]}><ErrorBoundary error={error} errorInfo={error}/></IntlProvider>, document.getElementById('root'))\n\t    console.log(error)\n\t})\n","module.exports = __webpack_public_path__ + \"static/media/logo.71fca57e.ico\";"],"sourceRoot":""}