{"version":3,"sources":["Utilities.js","map/VoteMap.js","SockJsClient.js","results/Candidates.js","results/Littlenogroup.js","results/Biggerpartygroup.js","results/Bigger.js","results/Little.js","App.js","serviceWorker.js","errors/ErrorBoundary.js","index.js","images/logo.ico"],"names":["getTabs","component","style","ReactDOM","findDOMNode","querySelectorAll","getVotingPaperById","value","result","config","votingPapers","forEach","votingPaper","id","getZoneById","sites","site","getComponentById","groups","group","parties","party","candidates","candidate","getVotesById","votes","electors","getPercent","voteComponent","voteVotingPaper","totalElectors","blankPapers","toFixed","isNaN","parseFloat","getBlankPapers","list","filter","length","getUpdateDate","options","year","month","day","hour","minute","affluence","Date","toLocaleDateString","language","getTitle","level","e","name","defaultMessage","setAllZones","counter","zones","zone","type","push","findZonesByFather","list2","list3","label","f","g","alphabetic","sort","a","b","findFatherByChild","objects","object","circumscriptions","regions","provinces","cities","VoteMap","Component","constructor","super","this","state","siteSuggestions","suggestSites","event","results","toLowerCase","startsWith","query","setState","reset","circumscription","region","province","city","selectComplete","props","app","refs","value0","locations","value1","flatMap","value2","value3","pop","renderLocations","map","render","placeholder","field","className","onChange","onSelect","suggestions","completeMethod","bind","size","icon","width","resultCircumscriptions","ci","resultRegions","re","resultProvince","pr","resultRegion","SockJsClient","React","_initStompClient","client","Stomp","over","SockJS","url","heartbeat","outgoing","incoming","Object","keys","includes","heartbeatIncoming","heartbeatOutgoing","debug","_cleanUp","connected","retryCount","subscriptions","clear","_log","msg","console","log","_subscribe","topic","has","sub","subscribe","onMessage","_processMessage","body","headers","destination","subscribeHeaders","set","msgBody","JSON","parse","_unsubscribe","get","unsubscribe","delete","_connect","connect","topics","onConnect","error","onConnectFailure","stack","onDisconnect","autoReconnect","explicitDisconnect","_timeoutId","setTimeout","getRetryInterval","disconnect","clearTimeout","subid","sendMessage","opt_headers","Error","send","Map","componentDidMount","componentWillUnmount","shouldComponentUpdate","nextProps","nextState","UNSAFE_componentWillReceiveProps","Lo","difference","newTopic","oldTopic","defaultProps","count","Candidates","candidateTemplate","rowData","image","src","alt","left","top","position","renderDataTable","dataTable","numberVotes","jsonValue","i","lists","activeTabVote","sortField","sortOrder","scrollable","scrollHeight","header","columns","values","0","toLocaleTimeString","key","realTimeVotes","history","process","votings","bottom","Littlenogroup","showCandidates","selectedParty","voting_url","axios","then","response","data","catch","partyTemplate","candidatesTemplate","renderModalHeader","onClick","realTimeVotingPapers","progressSpinner","vote","votingValues","blankPapersValues","updateDate","updateDateValues","footer","percent","visible","modal","onHide","Biggerpartygroup","expandedRows","listsTemplate","rowExpansionTemplate","sumValue","sumPercent","sumPercentBallots","colSpan","footerColumnGroup","namePercent","images","onRowToggle","expander","Bigger","Little","App","activeItem","items","tabvotes","tabs","click","ballots","ref","subtitle","model","onTabChange","voteMap","title","logo","href","paddingRight","isLocalhost","Boolean","window","location","hostname","match","register","navigator","URL","origin","addEventListener","swUrl","fetch","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ErrorBoundary","whiteSpace","toString","errorInfo","componentStack","addLocaleData","locale_en","locale_it","messages","messages_it","split","voting_papers_url","search","document","getElementById","papers","locale","module","exports"],"mappings":"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","file":"static/js/main.518c1482.chunk.js","sourcesContent":["import React from 'react'\nimport { config } from './App'\nimport ReactDOM from 'react-dom'\nimport { language } from './index'\nimport { FormattedMessage } from 'react-intl'\n\nexport const getTabs = (component, style) => {\n    return ReactDOM.findDOMNode(component).querySelectorAll(style + ' .p-menuitem-link')\n}\n\nexport const getVotingPaperById = (value) => {\n\tif (value) {\n\t\tlet result = ''\n    \tconfig.votingPapers.forEach(votingPaper => {\n\t\t\tif (votingPaper.id === value.id)\n\t\t\t\tresult = votingPaper\n\t\t})\n\t\treturn result\n\t} else return ''\n}\n\nexport const getZoneById = (value, sites) => {\n\tif (value) {\n\t\tlet result = ''\n\t\tsites.forEach(site => {\n\t\t\tif (site.id === value)\n\t\t\t\tresult = site\n\t\t})\n\t\treturn result\n\t} else return ''\n}\n\nexport const getComponentById = (value, votingPaper) => {\n\tlet result\n\tif (votingPaper.id === value)\n\t\tresult = votingPaper\n\telse {\n\t\tif (votingPaper.groups)\n\t\t\tvotingPaper.groups.forEach(group => {\n\t\t\t\tif (group.id === value)\n\t\t\t\t\tresult = group\n\t\t\t\t\telse group.parties.forEach(party => {\n\t\t\t\t\t\tif (party.id === value)\n\t\t\t\t\t\t\tresult = party\n\t\t\t\t\t\telse if (party.candidates)\n\t\t\t\t\t\t\tparty.candidates.forEach(candidate => {\n\t\t\t\t\t\t\t\tif (candidate.id === value)\n\t\t\t\t\t\t\t\t\tresult = candidate\n\t\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t})\n\t\tif (votingPaper.parties)\n\t\t\tvotingPaper.parties.forEach(party => {\n\t\t\t\tif (party.id === value)\n\t\t\t\t\tresult = party\n\t\t\t\telse if (party.candidates) \n\t\t\t\t\tparty.candidates.forEach(candidate => {\n\t\t\t\t\t\tif (candidate.id === value)\n\t\t\t\t\t\t\tresult = candidate\n\t\t\t\t\t})\n\t\t\t})\n\t\t}\n\treturn result\n}\n\nexport const getVotesById = (value, votes) => {\n\tlet result = 0\n\tvotes.votingPapers.forEach(votingPaper => {\n\t\tlet component = getComponentById(value, votingPaper)\n\t\tif (component)\n\t\t\tresult = component.electors\n\t})\n\treturn result\n}\n\nexport const getPercent = (value, votes) => {\n\tlet voteComponent\n\tlet voteVotingPaper\n\tlet result = 0\n\tvotes.votingPapers.forEach(votingPaper => {\n\t\tlet component = getComponentById(value, votingPaper)\n\t\tif (component) {\n\t\t\tvoteComponent = component\n\t\t\tvoteVotingPaper = votingPaper\n\t\t}\n\t})\n\tif (voteComponent) {\n\t\tlet totalElectors = voteVotingPaper.electors - voteVotingPaper.blankPapers\n\t\tresult = (voteComponent.electors / totalElectors * 100).toFixed(2)\n\t\tif (isNaN(result))\n\t\t\tresult = 0\n\t}\n\treturn parseFloat(result)\n}\n\nexport const getBlankPapers = (value, votes) => {\n\tlet list = votes.votingPapers.filter(votingPaper => votingPaper.id === value)\n\tif (list.length > 0)\n\t\treturn list[0].blankPapers\n\telse return 0\n}\n\nexport const getUpdateDate = (votes) => {\n\tlet options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }\n\tif (votes.affluence)\n\t\treturn new Date(votes.affluence).toLocaleDateString(language, options)\n\telse return new Date().toLocaleDateString(language, options)\n}\n\nexport const getTitle = (value) => {\n\tif (value) {\n\t\treturn <FormattedMessage id={'level_' + value.level}>\n\t\t\t\t\t{e => e + ' ' + value.name}\n\t\t\t   </FormattedMessage>\n\t} else return <FormattedMessage id={language} defaultMessage='Great Britain' />\n}\n\nexport const setAllZones = (value, votingPaper, list, counter) => {\n\t\tvalue.zones.forEach(zone => { \n\t\t\tif (zone.zones) {\n\t\t\t\tif (votingPaper.type === 'little-nogroup' || counter > 0)\n\t\t\t\t\tlist.push(zone)\n\t\t\t\tsetAllZones(zone, votingPaper, list, counter + 1)\n\t\t\t}\n\t\t})\n}\n\nexport const findZonesByFather = (value, zones, list, list2, list3) => {\n\tzones.forEach(zone => {\n\t\tif (zone.id === value)\n\t\t\tzone.zones.forEach( e => {\n\t\t\t\tlist.push( { label: e.name, value: e.id})\n\t\t\t\tif (list2)\n\t\t\t\t\te.zones.forEach( f => {\n\t\t\t\t\t\tlist2.push( { label: f.name, value: f.id})\n\t\t\t\t\t\tif (list3)\n\t\t\t\t\t\t\tf.zones.forEach( g => {\n\t\t\t\t\t\t\t\tlist3.push( { label: g.name, value: g.id})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t})\n\t\telse findZonesByFather(value, zone.zones, list, list2, list3)\n\t})\n}\n\nexport const alphabetic = (list) => {\n\tlist.sort(function(a, b){\n\t\tif(a.label < b.label || a.name < b.name) { return -1; }\n\t\tif(a.label > b.label || a.name > b.name) { return 1; }\n\t\treturn 0;\n\t})\n}\n\nexport const findFatherByChild = (value, objects, result) => {\n\tobjects.forEach(object => {\n\t\tobject.zones.forEach(zone => {\n\t\tif (zone)\n\t\t\tif (zone.id === value) {\n\t\t\t\tresult.push(object)\n\t\t\t} else {\n\t\t\t\tfindFatherByChild(value, object.zones, result)\t\n\t\t\t}\n\t\t})\n\t})\n}","import React, { Component } from 'react'\nimport './VoteMap.css'\nimport { Dropdown } from 'primereact/dropdown'\nimport { Button } from 'primereact/button'\nimport { AutoComplete } from 'primereact/autocomplete'\nimport { FormattedMessage } from 'react-intl'\nimport { setAllZones, findZonesByFather, findFatherByChild, getZoneById, alphabetic } from '../Utilities'\nimport { locations } from '../index'\n\nlet circumscriptions = []\nlet regions = []\nlet provinces = []\nlet cities = []\n\nclass VoteMap extends Component {\n\n\tconstructor() {\n\t\tsuper()\n\n\t\tthis.state = {\n\t\t\tsiteSuggestions: null\n\t\t}\n\t}\n\n\tsuggestSites(event) {\n\t\tlet results = this.sites.filter((site) => {\n\t\t\treturn site.name.toLowerCase().startsWith(event.query.toLowerCase())\n\t\t})\n\n\t\tthis.setState({ siteSuggestions: results })\n\t}\n\n\treset() {\n\t\tthis.setState({\n\t\t\tcircumscription: null,\n\t\t\tregion: null,\n\t\t\tprovince: null,\n\t\t\tcity: null,\n\t\t\tsite: null\n\t\t})\n\t}\n\n\tselectComplete(value) {\n\t\tthis.props.app.refs.results.setState({ zone: value })\n\t\tlet value0 = locations.zones.filter(zone => {\n\t\t\treturn zone.id === value.id\n\t\t})[0]\n\t\tlet value1 = locations.zones.flatMap(e => e.zones).filter(zone => {\n\t\t\treturn zone.id === value.id\n\t\t})[0]\n\t\tlet value2 = locations.zones.flatMap(e => e.zones).flatMap(e => e.zones).filter(zone => {\n\t\t\treturn zone.id === value.id\n\t\t})[0]\n\t\tlet value3 = locations.zones.flatMap(e => e.zones).flatMap(e => e.zones).flatMap(e => e.zones).filter(zone => {\n\t\t\treturn zone.id === value.id\n\t\t})[0]\n\t\tlet results\n\t\tif (!value2) {\n\t\t\tfindFatherByChild(value3 ? value3.id : null, locations.zones, results = [])\n\t\t\tvalue2 = results.pop()\n\t\t}\n\t\tif (!value1) {\n\t\t\tfindFatherByChild(value2 ? value2.id : value3 ? value3.id : null, locations.zones, results = [])\n\t\t\tvalue1 = results.pop()\n\t\t}\n\t\tif (!value0) {\n\t\t\tfindFatherByChild(value1 ? value1.id : value2 ? value2.id : value3 ? value3.id : null, locations.zones, results = [])\n\t\t\tvalue0 = results.pop()\n\t\t}\n\t\tthis.setState({\n\t\t\tcircumscription: value0 ? value0.id : null,\n\t\t\tregion: value1 ? value1.id : null,\n\t\t\tprovince: value2 ? value2.id : null,\n\t\t\tcity: value3 ? value3.id : null\n\t\t})\n\t}\n\n\trenderLocations() {\n\t\tif (this.props.votingPaper && locations) {\n\t\t\tif (this.props.votingPaper.type === 'little-nogroup')\n\t\t\t\tcircumscriptions = locations.zones.map(city => {\n\t\t\t\t\treturn { label: city.name, value: city.id }\n\t\t\t\t})\n\n\t\t\tif (this.state.circumscription === null || this.props.votingPaper.type !== 'little-nogroup')\n\t\t\t\tregions = locations.zones.flatMap(city => city.zones).map(city => {\n\t\t\t\t\treturn { label: city.name, value: city.id }\n\t\t\t\t})\n\t\t\telse\n\t\t\t\tfindZonesByFather(this.state.circumscription, locations.zones, regions = [], provinces = [], cities = [])\n\n\t\t\tif (this.state.circumscription === null || this.state.region !== null)\n\t\t\t\tif (this.state.region === null)\n\t\t\t\t\tprovinces = locations.zones.flatMap(city => city.zones).flatMap(city => city.zones).map(city => {\n\t\t\t\t\t\treturn { label: city.name, value: city.id }\n\t\t\t\t\t})\n\t\t\t\telse\n\t\t\t\t\tfindZonesByFather(this.state.region, locations.zones, provinces = [], cities = [])\n\n\t\t\tif ((this.state.circumscription === null && this.state.region === null) || this.state.province !== null)\n\t\t\t\tif (this.state.province === null)\n\t\t\t\t\tcities = locations.zones.flatMap(city => city.zones).flatMap(city => city.zones).flatMap(city => city.zones).map(city => {\n\t\t\t\t\t\treturn { label: city.name, value: city.id }\n\t\t\t\t\t})\n\t\t\t\telse findZonesByFather(this.state.province, locations.zones, cities = [])\n\n\t\t\tthis.sites = []\n\t\t\tsetAllZones(locations, this.props.votingPaper, this.sites, 0)\n\t\t\talphabetic(this.sites)\n\t\t\talphabetic(cities)\n\t\t\talphabetic(provinces)\n\t\t\talphabetic(regions)\n\t\t\talphabetic(circumscriptions)\n\t\t}\n\t}\n\n\trender() {\n\t\tthis.renderLocations()\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<FormattedMessage\n\t\t\t\t\tid='app.search'\n\t\t\t\t\tdefaultMessage='Search site...'>\n\t\t\t\t\t{(placeholder) => <AutoComplete field='name' className='searchsites' value={this.state.site} onChange={(e) =>\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tsite: e.value\n\t\t\t\t\t\t})\n\t\t\t\t\t} onSelect={(e) => {\n\t\t\t\t\t\tthis.selectComplete(e.value)\n\t\t\t\t\t}}\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\tsuggestions={this.state.siteSuggestions}\n\t\t\t\t\t\tcompleteMethod={this.suggestSites.bind(this)} size={38} />}\n\t\t\t\t</FormattedMessage>\n\t\t\t\t<Button id='btnSearch' icon='pi pi-search' />\n\t\t\t\t{this.props.votingPaper && this.props.votingPaper.type === 'little-nogroup' && <div className='p-grid'>\n\t\t\t\t\t<div className='p-col-2'>\n\t\t\t\t\t\t<FormattedMessage id='app.circumscription'\n\t\t\t\t\t\t\tdefaultMessage='Circumscription'>\n\t\t\t\t\t\t\t{(city) => <label><b>{city}</b></label>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t\t<FormattedMessage id='app.choosecircumscription'\n\t\t\t\t\t\t\tdefaultMessage='Choose circumscription...'>\n\t\t\t\t\t\t\t{(placeholder) => <Dropdown value={this.state.circumscription} className='city'\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tcircumscription: e.value,\n\t\t\t\t\t\t\t\t\t\tregion: null,\n\t\t\t\t\t\t\t\t\t\tprovince: null,\n\t\t\t\t\t\t\t\t\t\tcity: null,\n\t\t\t\t\t\t\t\t\t\tsite: null\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tthis.props.app.refs.results.setState({ zone: getZoneById(e.value, this.sites) })\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t\t\toptions={circumscriptions}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t</div>\n\t\t\t\t</div>}\n\t\t\t\t<div className='p-grid'>\n\t\t\t\t\t<div className='p-col-fixed' style={{ width: '160px' }}>\n\t\t\t\t\t\t<FormattedMessage id='app.region'\n\t\t\t\t\t\t\tdefaultMessage='Region'>\n\t\t\t\t\t\t\t{(region) => <label><b>{region}</b></label>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t\t<FormattedMessage id='app.chooseregion'\n\t\t\t\t\t\t\tdefaultMessage='Choose region...'>\n\t\t\t\t\t\t\t{(placeholder) => <Dropdown value={this.state.region} className='choose'\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tlet resultCircumscriptions = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(e.value, locations.zones, resultCircumscriptions)\n\t\t\t\t\t\t\t\t\tlet ci = resultCircumscriptions.pop()\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tcircumscription: this.state.circumscription !== null ? this.state.circumscription : ci.id,\n\t\t\t\t\t\t\t\t\t\tregion: e.value,\n\t\t\t\t\t\t\t\t\t\tprovince: null,\n\t\t\t\t\t\t\t\t\t\tcity: null,\n\t\t\t\t\t\t\t\t\t\tsite: null\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tthis.props.app.refs.results.setState({ zone: getZoneById(e.value, this.sites) })\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t\t\toptions={regions}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='p-col-2'>\n\t\t\t\t\t\t<FormattedMessage id='app.province'\n\t\t\t\t\t\t\tdefaultMessage='Province'>\n\t\t\t\t\t\t\t{(province) => <label><b>{province}</b></label>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t\t<FormattedMessage id='app.chooseprovince'\n\t\t\t\t\t\t\tdefaultMessage='Choose province...'>\n\t\t\t\t\t\t\t{(placeholder) => <Dropdown value={this.state.province} className='choose'\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tlet resultRegions = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(e.value, locations.zones, resultRegions)\n\t\t\t\t\t\t\t\t\tlet re = resultRegions.pop()\n\t\t\t\t\t\t\t\t\tlet resultCircumscriptions = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(re.id, locations.zones, resultCircumscriptions)\n\t\t\t\t\t\t\t\t\tlet ci = resultCircumscriptions.pop()\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tcircumscription: this.state.circumscription !== null ? this.state.circumscription : ci.id,\n\t\t\t\t\t\t\t\t\t\tregion: this.state.region !== null ? this.state.region : re.id,\n\t\t\t\t\t\t\t\t\t\tprovince: e.value,\n\t\t\t\t\t\t\t\t\t\tcity: null,\n\t\t\t\t\t\t\t\t\t\tsite: null\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tthis.props.app.refs.results.setState({ zone: getZoneById(e.value, this.sites) })\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t\t\toptions={provinces}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='p-grid'>\n\t\t\t\t\t<div className='p-col-2'>\n\t\t\t\t\t\t<FormattedMessage id='app.city'\n\t\t\t\t\t\t\tdefaultMessage='City'>\n\t\t\t\t\t\t\t{(city) => <label><b>{city}</b></label>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t\t<FormattedMessage id='app.choosecity'\n\t\t\t\t\t\t\tdefaultMessage='Choose city...'>\n\t\t\t\t\t\t\t{(placeholder) => <Dropdown value={this.state.city} className='city'\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tlet resultProvince = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(e.value, locations.zones, resultProvince)\n\t\t\t\t\t\t\t\t\tlet pr = resultProvince.pop()\n\t\t\t\t\t\t\t\t\tlet resultRegion = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(pr.id, locations.zones, resultRegion)\n\t\t\t\t\t\t\t\t\tlet re = resultRegion.pop()\n\t\t\t\t\t\t\t\t\tlet resultCircumscriptions = []\n\t\t\t\t\t\t\t\t\tfindFatherByChild(re.id, locations.zones, resultCircumscriptions)\n\t\t\t\t\t\t\t\t\tlet ci = resultCircumscriptions.pop()\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tcircumscription: this.state.circumscription !== null ? this.state.circumscription : ci.id,\n\t\t\t\t\t\t\t\t\t\tregion: this.state.region !== null ? this.state.region : re.id,\n\t\t\t\t\t\t\t\t\t\tprovince: this.state.province !== null ? this.state.province : pr.id,\n\t\t\t\t\t\t\t\t\t\tcity: e.value,\n\t\t\t\t\t\t\t\t\t\tsite: null\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\tthis.props.app.refs.results.setState({ zone: getZoneById(e.value, this.sites) })\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t\t\toptions={cities}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t</FormattedMessage>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default VoteMap","import React from 'react'\nimport SockJS from 'sockjs-client'\nimport Stomp from 'stompjs'\nimport PropTypes from 'prop-types'\nimport Lo from 'lodash'\n\n/**\n * React component for SockJS-client with STOMP messaging protocol.\n *\n * @version 4.1.0\n * @author [lahsivjar] (https://github.com/lahsivjar)\n * @see {@link https://stomp.github.io/|STOMP}\n * @see {@link https://github.com/sockjs/sockjs-client|StompJS}\n */\nclass SockJsClient extends React.Component {\n  static defaultProps = {\n    onConnect: () => {},\n    onDisconnect: () => {},\n    getRetryInterval: (count) => { return 1000 * count },\n    options: {},\n    headers: {},\n    subscribeHeaders: {},\n    autoReconnect: true,\n    debug: false,\n    heartbeat: 10000\n  }\n\n  static propTypes = {\n    /**\n     * HTTP URL of the endpoint to connect.\n     */\n    url: PropTypes.string.isRequired,\n    /**\n     * Additional options to pass to the underlying SockJS constructor.\n     *\n     * @see [SockJS-options](https://github.com/sockjs/sockjs-client#sockjs-client-api)\n     */\n    options: PropTypes.object,\n    /**\n     * Array of topics to subscribe to.\n     */\n    topics: PropTypes.array.isRequired,\n    /**\n     * Callback after connection is established.\n     */\n    onConnect: PropTypes.func,\n    /**\n     * Callback after connection is lost.\n     */\n    onDisconnect: PropTypes.func,\n    /**\n     * Gets called to find the time interval for next retry. Defaults to a function returing retryCount seconds.\n     *\n     * @param {number} retryCount number of retries for the current disconnect\n     */\n    getRetryInterval: PropTypes.func,\n    /**\n     * Callback when a message is recieved.\n     *\n     * @param {(string|Object)} msg message received from server, if JSON format then object\n     * @param {string} topic the topic on which the message was received\n     */\n    onMessage: PropTypes.func.isRequired,\n    /**\n     * Headers that will be passed to the server or broker with STOMP's connection frame.\n     */\n    headers: PropTypes.object,\n    /**\n     * Headers that will be passed when subscribing to a destination.\n     */\n    subscribeHeaders: PropTypes.object,\n    /**\n     * Should the client try to automatically connect in an event of disconnection.\n     */\n    autoReconnect: PropTypes.bool,\n    /**\n     * Enable debugging mode.\n     */\n    debug: PropTypes.bool,\n    /**\n     * Number of milliseconds to send and expect heartbeat messages.\n     */\n    heartbeat: PropTypes.number,\n    /**\n     * Number of milliseconds to expect heartbeat messages\n     */\n    heartbeatIncoming: PropTypes.number,\n    /**\n     * Number of milliseconds to send heartbeat messages\n     */\n    heartbeatOutgoing: PropTypes.number,\n    /**\n     * Callback if connection could not be established\n     */\n    onConnectFailure: PropTypes.func\n  }\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      connected: false,\n      // False if disconnect method is called without a subsequent connect\n      explicitDisconnect: false\n    }\n\n    this.subscriptions = new Map()\n    this.retryCount = 0\n  }\n\n  componentDidMount () {\n    this._connect()\n  }\n\n  componentWillUnmount () {\n    this.disconnect()\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    return false\n  }\n\n  UNSAFE_componentWillReceiveProps (nextProps) {\n    if (this.state.connected) {\n      // Subscribe to new topics\n      Lo.difference(nextProps.topics, this.props.topics)\n        .forEach((newTopic) => {\n          this._log('Subscribing to topic: ' + newTopic)\n          this._subscribe(newTopic)\n        })\n\n      // Unsubscribe from old topics\n      Lo.difference(this.props.topics, nextProps.topics)\n        .forEach((oldTopic) => {\n          this._log('Unsubscribing from topic: ' + oldTopic)\n          this._unsubscribe(oldTopic)\n        })\n    }\n  }\n\n  render () {\n    return null\n  }\n\n  _initStompClient = () => {\n    // Websocket held by stompjs can be opened only once\n    this.client = Stomp.over(new SockJS(this.props.url, null, this.props.options))\n\n    this.client.heartbeat.outgoing = this.props.heartbeat\n    this.client.heartbeat.incoming = this.props.heartbeat\n\n    if (Object.keys(this.props).includes('heartbeatIncoming')) {\n      this.client.heartbeat.incoming = this.props.heartbeatIncoming\n    }\n    if (Object.keys(this.props).includes('heartbeatOutgoing')) {\n      this.client.heartbeat.outgoing = this.props.heartbeatOutgoing\n    }\n    if (!this.props.debug) {\n      this.client.debug = () => {}\n    }\n  }\n\n  _cleanUp = () => {\n    this.setState({ connected: false })\n    this.retryCount = 0\n    this.subscriptions.clear()\n  }\n\n  _log = (msg) => {\n    if (this.props.debug) {\n      console.log(msg)\n    }\n  }\n\n  _subscribe = (topic) => {\n    if (!this.subscriptions.has(topic)) {\n      let sub = this.client.subscribe(topic, (msg) => {\n        this.props.onMessage(this._processMessage(msg.body), msg.headers.destination)\n      }, this.props.subscribeHeaders)\n      this.subscriptions.set(topic, sub)\n    }\n  }\n\n  _processMessage = (msgBody) => {\n    try {\n      return JSON.parse(msgBody)\n    } catch (e) {\n      return msgBody\n    }\n  }\n\n  _unsubscribe = (topic) => {\n    let sub = this.subscriptions.get(topic)\n    sub.unsubscribe()\n    this.subscriptions.delete(topic)\n  }\n\n  _connect = () => {\n    this._initStompClient()\n    this.client.connect(this.props.headers, () => {\n      this.setState({ connected: true })\n      this.props.topics.forEach((topic) => {\n        this._subscribe(topic)\n      })\n      this.props.onConnect()\n    }, (error) => {\n      if (error) {\n        if (Object.keys(this.props).includes('onConnectFailure')) {\n          this.props.onConnectFailure(error)\n        } else {\n          this._log(error.stack)\n        }\n      }\n      if (this.state.connected) {\n        this._cleanUp()\n        // onDisconnect should be called only once per connect\n        this.props.onDisconnect()\n      }\n      if (this.props.autoReconnect && !this.state.explicitDisconnect) {\n        this._timeoutId = setTimeout(this._connect, this.props.getRetryInterval(this.retryCount++))\n      }\n    })\n  }\n\n  /**\n   * Connect to the server if not connected. Under normal circumstances component\n   * will automatically try to connect to server. This method is mostly useful\n   * after component is explicitly disconnected via {@link SockJsClient#disconnect}.\n   *\n   * @public\n   */\n  connect = () => {\n    this.setState({ explicitDisconnect: false })\n    if (!this.state.connected) {\n      this._connect()\n    }\n  }\n\n  /**\n   * Disconnect STOMP client and disable all reconnect.\n   *\n   * @public\n   */\n  disconnect = () => {\n    // On calling disconnect explicitly no effort will be made to reconnect\n    // Clear timeoutId in case the component is trying to reconnect\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId)\n      this._timeoutId = null\n    }\n    this.setState({ explicitDisconnect: true })\n    if (this.state.connected) {\n      this.subscriptions.forEach((subid, topic) => {\n        this._unsubscribe(topic)\n      })\n      this.client.disconnect(() => {\n        this._cleanUp()\n        this.props.onDisconnect()\n        this._log('Stomp client is successfully disconnected!')\n      })\n    }\n  }\n\n  /**\n   * Send message to the specified topic.\n   *\n   * @param {string} topic target topic to send message\n   * @param {string} msg message to send\n   * @param {Object} [opt_headers={}] additional headers for underlying STOMP client\n   * @public\n   */\n  sendMessage = (topic, msg, opt_headers = {}) => {\n    if (this.state.connected) {\n      this.client.send(topic, opt_headers, msg)\n    } else {\n      throw new Error('Send error: SockJsClient is disconnected')\n    }\n  }\n}\n\nexport default SockJsClient","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport './Candidates.css'\nimport { getVotesById } from '../Utilities';\nimport { language, history } from '../index'\nimport SockJsClient from '../SockJsClient'\n\nexport class Candidates extends Component {\n\n    candidateTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n    \n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.props.party) {\n        \tlet values = this.props.party.candidates\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, this.props.votes[this.props.votes.length -1])\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes\n        \t\t}\n        \t\tfor (let i = 0; i< this.props.votes.length; i++)\n        \t\t\tjsonValue['votes'+i] = getVotesById(e.id, this.props.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let lists = <FormattedMessage id='app.table.candidate' defaultMessage='Candidate' />\n            let votes = <FormattedMessage id='app.table.preferences' defaultMessage='Preferences' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px'\n            \t\t\t className='candidates-table'>\n        \t\t\t\t\t<Column field='image' body={this.candidateTemplate} style={{width:'14%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} style={{width:'70%'}} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.props.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.numbers' defaultMessage='hours {0}' values={{0: new Date(this.props.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'votes'+i} header={header} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\t\tscrollable={true} scrollHeight='450px'\n\t\t\t \t\t\t\tclassName='candidates-table'>\n\t\t\t\t\t\t\t\t<Column field='image' body={this.candidateTemplate} style={{width:'14%'}} />\n\t\t\t\t\t\t\t\t<Column field='name' header={lists} style={{width:'50%'}} />\n\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \t\tif (this.props.party) {\n    \t    \tlet realTimeVotes = ''\n    \t        if (!history)\n    \t            realTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n    \t            \t\t\t\t\tonMessage={(msg) => { \n    \t            \t\t\t\t\t\tthis.setState({\n    \t            \t\t\t\t\t\t\tvotes: msg.votings\n    \t            \t\t\t\t\t\t})\n    \t            \t\t\t\t}} />\n    \t\t\treturn (\n    \t\t\t\t<div className='tableContent'>\n            \t\t\t{realTimeVotes}\n    \t\t\t\t\t<div className='party-for-candidates'>\n    \t\t\t\t\t\t<img src={`data:image/jpeg;base64,${this.props.party.image}`}\n            \t\t\t\t\t\talt={this.props.party.name} \n            \t\t\t\t\t\tstyle={{ width:'66px', left:'2%', bottom:'6px', position:'relative' }} />\n            \t\t\t\t\t<div className='title-for-candidates'>{this.props.party.name}</div>\n    \t\t\t\t\t</div>\n    \t\t\t\t\t{this.renderDataTable()}\n    \t\t\t\t</div>\n    \t\t\t)\n    \t\t} else return ''\n    }\n}\n\nexport default Candidates","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { Button } from 'primereact/button'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport './Results.css'\nimport './Littlenogroup.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\nimport {ProgressSpinner} from 'primereact/progressspinner'\n\nexport class Littlenogroup extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n        \tzone: null,\n        \tshowCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({\n    \t    \t\tvotes: response.data.votings,\n    \t    \t\tvotingPaper: this.props.app.state.votingPaper\n    \t    \t})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div id='headEnti'>\n        \t\t\t<h2>{getTitle(this.state.zone)}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\t\n\treset() {\n\t\tthis.setState({\n\t\t\tzone: null\n\t\t})\n\t}\n\n    render() {\n    \tlet realTimeVotingPapers = ''\n    \tlet realTimeVotes = ''\n    \tlet dataTable = ''\n    \tlet progressSpinner = ''\n    \tif (!this.state.votes)\n    \t\tprogressSpinner = <ProgressSpinner/>\n    \tif (this.state.votes && this.state.votingPaper) {\n        \tif (!history) {\n    \t\t\trealTimeVotingPapers = <SockJsClient url={process.env.REACT_APP_VOTING_PAPERS_REALTIME_URL} topics={['/topic/votingpaper']}\n    \t\t\t\t\t\t\t\t\t\tonMessage={(msg) => {\n        \t            \t\t\t\t\tthis.setState({\n        \t            \t\t\t\t\t\tvotingPaper: msg.votingPapers.filter(((e) => e.id === this.state.votingPaper.id))[0]\n        \t            \t\t\t\t\t})\n    \t\t\t\t\t\t\t\t   }} />\n        \t    realTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n        \t            \t\t\tonMessage={(msg) => { \n        \t            \t\t\t\tthis.setState({\n        \t            \t\t\t\t\tvotes: msg.votings\n        \t            \t\t\t\t})\n        \t            \t\t}} />\n        \t}\n    \t\tlet vote = this.state.votes[this.state.votes.length -1]\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n    \t\tlet votingValues = getVotesById(this.state.votingPaper.id, vote)\n    \t\tlet blankPapersValues = getBlankPapers(this.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n    \t\tlet updateDateValues = getUpdateDate(vote)\n    \t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp; \n    \t\t\t\t\t\t{blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n    \t\t\t\t\t\t{updateDate} <span className='footer-value'>{updateDateValues}</span>\n    \t\t\t\t\t </div>\n    \t\tlet values = this.state.votingPaper.parties\n    \t\tlet value = values.map((e) => {\n    \t\t\t\tlet numberVotes = getVotesById(e.id, vote)\n                \tlet percent = getPercent(e.id, vote)\n            \t\tlet jsonValue = {\n            \t\t\tid: e.id,\n            \t\t\tname: e.name,\n            \t\t\timage: e.image,\n            \t\t\tvotes: numberVotes,\n            \t\t\tpercent: percent\n            \t\t}\n            \t\tfor (let i = 0; i< this.state.votes.length; i++)\n            \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n            \t\treturn jsonValue\n    \t\t})\n    \t\tlet lists = <FormattedMessage id='app.table.lists' defaultMessage='Lists' />\n    \t\tlet votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n    \t\t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}>\n    \t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n    \t\t\t\t\t\t<Column field='name' header={lists} body={this.candidatesTemplate} style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n    \t\t\t\t\t</DataTable>\n    \t\telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tscrollable={true} scrollHeight='450px' footer={footer}>\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} body={this.candidatesTemplate} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n    \t\t}\n    \t}\n        return (\n        \t<div className='tableContent'>\n        \t\t{progressSpinner}\n        \t\t{realTimeVotingPapers}\n    \t\t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle(this.state.zone)}</h3>\n        \t\t</div>\n            \t{dataTable}\n            \t<Dialog visible={this.state.showCandidates} \n        \t\t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n        \t\t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n        \t\t\t<Candidates zone={this.state.zone} party={this.state.selectedParty} \n        \t\t\t\tvotes={this.state.votes} app={this.props.app} />\n        \t\t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Littlenogroup","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { ColumnGroup } from 'primereact/columngroup'\nimport { Button } from 'primereact/button'\nimport { Row } from 'primereact/row'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport './Results.css'\nimport './Biggerpartygroup.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\nimport {ProgressSpinner} from 'primereact/progressspinner'\n\nexport class Biggerpartygroup extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n        \tzone: null,\n            expandedRows: null,\n            showCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({\n    \t    \t\tvotes: response.data.votings,\n    \t    \t\tvotingPaper: this.props.app.state.votingPaper\n    \t    \t})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.listsTemplate = this.listsTemplate.bind(this);\n        this.rowExpansionTemplate = this.rowExpansionTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div id='headEnti'>\n        \t\t\t<h2>{getTitle(this.state.zone)}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n    \n    rowExpansionTemplate(data) {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n            let values = getComponentById(data.id, this.state.votingPaper).parties\n            let sumValue = 0\n            let sumPercent = 0\n            let sumPercentBallots = []\n            let value = values.map((e) => {\n                let numberVotes = getVotesById(e.id, vote)\n                sumValue += numberVotes\n            \tlet percent = getPercent(e.id, vote)\n                sumPercent += percent\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++) {\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\t\tsumPercentBallots += jsonValue['percent'+i]\n        \t\t}\n        \t\treturn jsonValue\n            })\n            let footer = ''\n            if (values.length > 1) {\n        \t\tlet votings =  <FormattedMessage id='app.table.totallists' defaultMessage='Total lists' />\n            \tif (this.props.app.state.activeTabVote.id === 0)\n            \t\tfooter = <ColumnGroup>\n            \t\t\t\t\t\t<Row>\n            \t\t\t\t\t\t\t<Column colSpan={2} />\n            \t\t\t\t\t\t\t<Column footer={votings} />\n            \t\t\t\t\t\t\t<Column footer={sumValue} />\n            \t\t\t\t\t\t\t<Column footer={sumPercent} />\n            \t\t\t\t\t\t</Row>\n            \t\t\t\t\t </ColumnGroup>\n            \telse {\n        \t\t\tlet columns = []\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} footer={sumPercentBallots[i]} />)\n        \t\t\tfooter = <ColumnGroup>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Column colSpan={2} />\n\t\t\t\t\t\t\t\t\t\t<Column footer={votings} />\n\t\t\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t</ColumnGroup>\n            \t}\n            }\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n            \t\t\t footerColumnGroup={footer} className='biggernogroup-sub-header'>\n            \t\t\t\t<Column />\n            \t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' style={{width: '70%' }} body={this.candidatesTemplate} />\n        \t\t\t\t\t<Column field='votes' />\n        \t\t\t\t\t<Column field='percent' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n            else {\n        \t\t\tlet columns = []\n        \t\t\tlet namePercent = 0\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} style={{width:'10%'}} />)\n            \t\tnamePercent = 80 - this.state.votes.length * 10\n        \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tfooterColumnGroup={footer} className='biggernogroup-sub-header'>\n\t\t\t\t\t\t\t<Column style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' body={this.candidatesTemplate} style={{width: namePercent + '%'}} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n            }\n        }\n        return dataTable\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\n    listsTemplate(rowData) {\n    \tlet images = ''\n    \tlet component = getComponentById(rowData.id, this.state.votingPaper)\n    \timages = component.parties.map(e => e.image ? <img key={e.id} src={`data:image/jpeg;base64,${e.image}`} \n\t\t\t\t\t\t\t\t  alt={rowData.name} style={{ width:'10%' }} /> : '')\n        return <div>{rowData.name} \n        \t\t  <div className='border-images'>\n        \t\t\t <span className='party-images'>{images}</span>\n        \t\t  </div>\n        \t   </div>\n    }\n\t\n\treset() {\n\t\tthis.setState({\n\t\t\tzone: null\n\t\t})\n\t}\n\t\n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n        \tlet values = this.state.votingPaper.groups\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, vote)\n            \tlet percent = getPercent(e.id, vote)\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n\t\t\tlet votingValues = getVotesById(this.state.votingPaper.id, vote)\n\t\t\tlet blankPapersValues = getBlankPapers(this.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n            let updateDateValues = getUpdateDate(vote)\n\t\t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp;\n\t\t\t\t\t\t\t  {blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n\t    \t\t\t\t\t  {updateDate} <span className='footer-value'>{updateDateValues}</span>\n\t\t\t\t\t\t </div>\n            let lists = <FormattedMessage id='app.table.candidatesandlists' defaultMessage='Candidates and Lists' />\n            let votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}\n        \t\t\t\t expandedRows={this.state.expandedRows} \n        \t\t\t\t onRowToggle={(e) => this.setState({expandedRows:e.data})}\n        \t\t\t\t rowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\t className='biggernogroup-table'>\n            \t\t\t\t<Column field='id' expander/>\n        \t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} body={this.listsTemplate} className='padding-name' style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tlet namePercent = 0\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n\t\t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n        \t\t}\n    \t\t\tnamePercent = 80 - this.state.votes.length * 10\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n            \t\t\tscrollable={true} scrollHeight='450px' footer={footer}\n\t\t\t \t\t\texpandedRows={this.state.expandedRows} \n\t\t\t \t\t\tonRowToggle={(e) => this.setState({expandedRows:e.data})}\n\t\t\t \t\t\trowExpansionTemplate={this.rowExpansionTemplate}\n\t\t\t \t\t\tclassName='biggernogroup-table'>\n\t\t\t\t\t\t\t<Column field='id' expander style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} className='padding-name' style={{width: namePercent + '%' }} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \tlet realTimeVotingPapers = ''\n    \tlet realTimeVotes = ''\n    \tlet progressSpinner = ''\n    \tif (!this.state.votes)\n    \t\tprogressSpinner = <ProgressSpinner/>\n        if (!history) {\n    \t\trealTimeVotingPapers = <SockJsClient url={process.env.REACT_APP_VOTING_PAPERS_REALTIME_URL} topics={['/topic/votingpaper']}\n    \t\t\t\t\t\t\t\t\tonMessage={(msg) => {\n        \t            \t\t\t\t\tthis.setState({\n        \t            \t\t\t\t\t\tvotingPaper: msg.votingPapers.filter(((e) => e.id === this.state.votingPaper.id))[0]\n        \t            \t\t\t\t\t})\n    \t\t\t\t\t\t\t   }} />\n        \trealTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n        \t\t\t\t\t\tonMessage={(msg) => { \n        \t\t\t\t\t\t\tthis.setState({\n        \t\t\t\t\t\t\t\tvotes: msg.votings\n        \t\t\t\t\t\t\t})\n        \t\t\t\t\t}} />\n        }\n        return (\n        \t<div className='tableContent'>\n        \t\t{progressSpinner}\n        \t\t{realTimeVotingPapers}\n    \t\t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle(this.state.zone)}</h3>\n        \t\t</div>\n            \t{this.renderDataTable()}\n            \t<Dialog visible={this.state.showCandidates} \n        \t\t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n        \t\t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n        \t\t\t<Candidates zone={this.state.zone} party={this.state.selectedParty} \n        \t\t\t\tvotes={this.state.votes} app={this.props.app} />\n        \t\t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Biggerpartygroup","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { ColumnGroup } from 'primereact/columngroup'\nimport { Button } from 'primereact/button'\nimport { Row } from 'primereact/row'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport './Results.css'\nimport './Bigger.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\nimport {ProgressSpinner} from 'primereact/progressspinner'\n\nexport class Bigger extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n        \tzone: null,\n            expandedRows: null,\n            showCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({\n    \t    \t\tvotes: response.data.votings,\n    \t    \t\tvotingPaper: this.props.app.state.votingPaper\n    \t    \t})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.listsTemplate = this.listsTemplate.bind(this);\n        this.rowExpansionTemplate = this.rowExpansionTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div>\n        \t\t\t<h2>{getTitle(this.state.zone)}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n    \n    rowExpansionTemplate(data) {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n            let values = getComponentById(data.id, this.state.votingPaper).parties\n            let sumValue = 0\n            let sumPercent = 0\n            let sumPercentBallots = []\n            let value = values.map((e) => {\n                let numberVotes = getVotesById(e.id, vote)\n                sumValue += numberVotes\n            \tlet percent = getPercent(e.id, vote)\n                sumPercent += percent\n                let jsonValue = {\n                \tid: e.id,\n                \tname: e.name,\n                \timage: e.image,\n                \tvotes: numberVotes,\n                \tpercent: percent\n                }\n        \t\tfor (let i = 0; i< this.state.votes.length; i++) {\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\t\tsumPercentBallots += jsonValue['percent'+i]\n        \t\t}\n        \t\treturn jsonValue\n            })\n            let footer = ''\n            if (values.length > 1) {\n        \t\tlet votings =  <FormattedMessage id='app.table.totallists' defaultMessage='Total lists' />\n            \tif (this.props.app.state.activeTabVote.id === 0)\n            \t\tfooter = <ColumnGroup>\n            \t\t\t\t\t\t<Row>\n            \t\t\t\t\t\t\t<Column colSpan={2} />\n            \t\t\t\t\t\t\t<Column footer={votings} />\n            \t\t\t\t\t\t\t<Column footer={sumValue} />\n            \t\t\t\t\t\t\t<Column footer={sumPercent} />\n            \t\t\t\t\t\t</Row>\n            \t\t\t\t </ColumnGroup>\n            \telse {\n        \t\t\tlet columns = []\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} footer={sumPercentBallots[i]} />)\n            \t\tfooter = <ColumnGroup>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Column colSpan={2} />\n\t\t\t\t\t\t\t\t\t\t<Column footer={votings} />\n\t\t\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t </ColumnGroup>\n            \t}\n            }\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n            \t\t\t footerColumnGroup={footer} className='bigger-sub-header'>\n            \t\t\t\t<Column />\n            \t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' style={{width: '70%' }} body={this.candidatesTemplate} />\n        \t\t\t\t\t<Column field='votes' />\n        \t\t\t\t\t<Column field='percent' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n            else {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} style={{width:'10%'}} />)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\t footerColumnGroup={footer} className='bigger-sub-header'>\n\t\t\t\t\t\t\t<Column style={{width: '6%' }} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' body={this.candidatesTemplate} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n            }\n        }\n        return dataTable\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\n    listsTemplate(rowData) {\n    \tlet images = ''\n    \tlet component = getComponentById(rowData.id, this.state.votingPaper)\n    \timages = component.parties.map(e => e.image ? <img key={e.id} src={`data:image/jpeg;base64,${e.image}`} \n\t\t\t\t\t\t\t\t  alt={rowData.name} style={{ width:'10%' }} /> : '')\n        return <div>{rowData.name} \n        \t\t  <div className='border-images'>\n        \t\t\t <span className='party-images'>{images}</span>\n        \t\t  </div>\n        \t   </div>\n    }\n\t\n\treset() {\n\t\tthis.setState({\n\t\t\tzone: null\n\t\t})\n\t}\n\t\n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n        \tlet values = this.state.votingPaper.groups\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, vote)\n            \tlet percent = getPercent(e.id, vote)\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n\t\t\tlet votingValues = getVotesById(this.state.votingPaper.id, vote)\n\t\t\tlet blankPapersValues = getBlankPapers(this.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n            let updateDateValues = getUpdateDate(vote)\n\t\t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp;\n\t\t\t\t\t\t\t  {blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n\t    \t\t\t\t\t  {updateDate} <span className='footer-value'>{updateDateValues}</span>\n\t\t\t\t\t\t </div>\n            let lists = <FormattedMessage id='app.table.governersandlists' defaultMessage='Candidates and Lists' />\n            let votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}\n        \t\t\t\t expandedRows={this.state.expandedRows} \n        \t\t\t\t onRowToggle={(e) => this.setState({expandedRows:e.data})}\n        \t\t\t\t rowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\t className='bigger-table'>\n            \t\t\t\t<Column field='id' expander/>\n        \t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} body={this.listsTemplate} style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tscrollable={true} scrollHeight='450px' footer={footer}\n\t\t\t \t\t\texpandedRows={this.state.expandedRows} \n\t\t\t \t\t\tonRowToggle={(e) => this.setState({expandedRows:e.data})}\n\t\t\t \t\t\trowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\tclassName='bigger-table'>\n\t\t\t\t\t\t\t<Column field='id' expander style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \tlet realTimeVotingPapers = ''\n    \tlet realTimeVotes = ''\n    \tlet progressSpinner = ''\n    \tif (!this.state.votes)\n    \t\tprogressSpinner = <ProgressSpinner/>\n    \tif (!history) {\n    \t\trealTimeVotingPapers = <SockJsClient url={process.env.REACT_APP_VOTING_PAPERS_REALTIME_URL} topics={['/topic/votingpaper']}\n    \t\t\t\t\t\t\t\t\tonMessage={(msg) => {\n        \t            \t\t\t\t\tthis.setState({\n        \t            \t\t\t\t\t\tvotingPaper: msg.votingPapers.filter(((e) => e.id === this.state.votingPaper.id))[0]\n        \t            \t\t\t\t\t})\n    \t\t\t\t\t\t\t   }} />\n        \trealTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n        \t            \t\tonMessage={(msg) => { \n        \t            \t\t\tthis.setState({\n        \t            \t\t\t\tvotes: msg.votings\n        \t            \t\t\t})\n        \t            \t}} />\n    \t}\n        return (\n        \t<div className='tableContent'>\n        \t\t{progressSpinner}\n        \t\t{realTimeVotingPapers}\n        \t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle(this.state.zone)}</h3>\n        \t\t</div>\n            \t{this.renderDataTable()}\n            \t<Dialog visible={this.state.showCandidates} \n            \t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n            \t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n            \t\t<Candidates zone={this.state.zone} party={this.state.selectedParty} \n            \t\t\tvotes={this.state.votes} app={this.props.app} />\n            \t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Bigger","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport { DataTable } from 'primereact/datatable'\nimport { Column } from 'primereact/column'\nimport { ColumnGroup } from 'primereact/columngroup'\nimport { Button } from 'primereact/button'\nimport { Candidates } from './Candidates'\nimport {Dialog} from 'primereact/dialog';\nimport { Row } from 'primereact/row'\nimport './Results.css'\nimport './Little.css'\nimport axios from 'axios'\nimport { getTitle, getVotesById, getBlankPapers, getComponentById, getPercent, getUpdateDate } from '../Utilities';\nimport {history, language} from '../index'\nimport SockJsClient from '../SockJsClient'\nimport {ProgressSpinner} from 'primereact/progressspinner'\n\nexport class Little extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n        \tzone: null,\n            expandedRows: null,\n            showCandidates: null,\n            selectedParty: null\n        }\n        let voting_url = process.env.REACT_APP_VOTING_URL\n        if (history) {\n        \tvoting_url = process.env.REACT_APP_HISTORY_VOTING_URL + '/' + history\n        }\n        axios\n    \t.get(voting_url)\n    \t.then(response => {\n    \t    this.setState({\n    \t    \t\tvotes: response.data.votings,\n    \t    \t\tvotingPaper: this.props.app.state.votingPaper\n    \t    \t})\n    \t})\n    \t.catch(function(error) {\n    \t    console.log(error)\n    \t})\n        this.partyTemplate = this.partyTemplate.bind(this);\n        this.listsTemplate = this.listsTemplate.bind(this);\n        this.rowExpansionTemplate = this.rowExpansionTemplate.bind(this);\n        this.candidatesTemplate = this.candidatesTemplate.bind(this);\n    }\n\n    renderModalHeader() {\n    \t\treturn (\n        \t\t<div id='headEnti'>\n        \t\t\t<h2>{getTitle(this.state.zone)}</h2>\n        \t\t\t<h3><FormattedMessage id='app.table.candidatesandelected' defaultMessage='Candidates and Elected' /></h3>\n        \t\t</div>\n        )\n    }\n    \n    candidatesTemplate(data) {\n    \tlet component = getComponentById(data.id, this.state.votingPaper)\n    \tif (component.candidates)\n    \t\treturn <Button label={data.name} className='candidates-button' \n    \t\t\tonClick={() => this.setState({showCandidates: true, selectedParty: component})} />\n    \t\telse return data.name\n    }\n    \n    rowExpansionTemplate(data) {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n            let values = getComponentById(data.id, this.state.votingPaper).parties\n            let sumValue = 0\n            let sumPercent = 0\n            let sumPercentBallots = []\n            let value = values.map((e) => {\n                let numberVotes = getVotesById(e.id, vote)\n                sumValue += numberVotes\n            \tlet percent = getPercent(e.id, vote)\n                sumPercent += percent\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++) {\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\t\tsumPercentBallots += jsonValue['percent'+i]\n        \t\t}\n        \t\treturn jsonValue\n            })\n            let footer = ''\n            if (values.length > 1) {\n        \t\tlet votings =  <FormattedMessage id='app.table.totallists' defaultMessage='Total lists' />\n            \tif (this.props.app.state.activeTabVote.id === 0)\n            \t\tfooter = <ColumnGroup>\n            \t\t\t\t\t\t<Row>\n            \t\t\t\t\t\t\t<Column colSpan={2} />\n            \t\t\t\t\t\t\t<Column footer={votings} />\n            \t\t\t\t\t\t\t<Column footer={sumValue} />\n            \t\t\t\t\t\t\t<Column footer={sumPercent} />\n            \t\t\t\t\t\t</Row>\n            \t\t\t\t </ColumnGroup>\n            \telse {\n        \t\t\tlet columns = []\n        \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} footer={sumPercentBallots[i]} />)\n            \t\tfooter = <ColumnGroup>\n\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t<Column colSpan={2} />\n\t\t\t\t\t\t\t\t\t\t<Column footer={votings} />\n\t\t\t\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t </ColumnGroup>\n            \t}\n            }\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n            \t\t\t footerColumnGroup={footer} className='little-sub-header'>\n            \t\t\t\t<Column />\n            \t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' style={{width: '70%' }} body={this.candidatesTemplate} />\n        \t\t\t\t\t<Column field='votes' />\n        \t\t\t\t\t<Column field='percent' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n            else {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++)\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} style={{width:'10%'}} />)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\t footerColumnGroup={footer} className='little-sub-header'>\n\t\t\t\t\t\t\t<Column style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' style={{width: '50%' }} body={this.candidatesTemplate} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n            }\n        }\n        return dataTable\n    }\n\n    partyTemplate(rowData) {\n    \tif (rowData.image)\n    \t\treturn <img src={`data:image/jpeg;base64,${rowData.image}`} \n        \t\t\t\talt={rowData.name} \n        \t\t\t\tstyle={{ width:'66px', left:'10%', top:'2px', position:'relative' }} />\n    \telse return ''\n    }\n\n    listsTemplate(rowData) {\n    \tlet images = ''\n    \tlet component = getComponentById(rowData.id, this.state.votingPaper)\n    \timages = component.parties.map(e => e.image ? <img key={e.id} src={`data:image/jpeg;base64,${e.image}`} \n\t\t\t\t\t\t\t\t  alt={rowData.name} style={{ width:'10%' }} /> : '')\n        return <div>{rowData.name} \n        \t\t  <div className='border-images'>\n        \t\t\t <span className='party-images'>{images}</span>\n        \t\t  </div>\n        \t   </div>\n    }\n\t\n\treset() {\n\t\tthis.setState({\n\t\t\tzone: null\n\t\t})\n\t}\n\t\n\trenderDataTable() {\n    \tlet dataTable = ''\n        if (this.state.votes && this.state.votingPaper) {\n        \tlet vote = this.state.votes[this.state.votes.length -1]\n        \tlet values = this.state.votingPaper.groups\n        \tlet value = values.map((e) => {\n        \t\tlet numberVotes = getVotesById(e.id, vote)\n            \tlet percent = getPercent(e.id, vote)\n        \t\tlet jsonValue = {\n        \t\t\tid: e.id,\n        \t\t\tname: e.name,\n        \t\t\timage: e.image,\n        \t\t\tvotes: numberVotes,\n        \t\t\tpercent: percent\n        \t\t}\n        \t\tfor (let i = 0; i< this.state.votes.length; i++)\n        \t\t\tjsonValue['percent'+i] = getPercent(e.id, this.state.votes[i])\n        \t\treturn jsonValue\n        \t})\n            let votings = <FormattedMessage id='app.table.votings' defaultMessage='Votings:' />\n            let blankPapers = <FormattedMessage id='app.table.blankpapers' defaultMessage='Blank papers:' />\n\t\t\tlet votingValues = getVotesById(this.state.votingPaper.id, vote)\n\t\t\tlet blankPapersValues = getBlankPapers(this.state.votingPaper.id, vote)\n            let updateDate = <FormattedMessage id='app.table.updatedate' defaultMessage='Data updated to:' />\n        \tlet updateDateValues = getUpdateDate(vote)\n\t\t\tlet footer = <div>{votings} <span className='footer-value'>{votingValues}</span> &nbsp;\n\t\t\t\t\t\t\t  {blankPapers} <span className='footer-value'>{blankPapersValues}</span> &nbsp;\n\t    \t\t\t\t\t  {updateDate} <span className='footer-value'>{updateDateValues}</span>\n\t\t\t\t\t\t </div>\n            let lists = <FormattedMessage id='app.table.premiersandlists' defaultMessage='Premiers and Lists' />\n            let votes = <FormattedMessage id='app.table.votes' defaultMessage='Votes' />\n            if (this.props.app.state.activeTabVote.id === 0)\n            \tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1} \n        \t\t\t\t scrollable={true} scrollHeight='450px' footer={footer}\n        \t\t\t\t expandedRows={this.state.expandedRows} \n        \t\t\t\t onRowToggle={(e) => this.setState({expandedRows:e.data})}\n        \t\t\t\t rowExpansionTemplate={this.rowExpansionTemplate}\n            \t\t\t className='little-table'>\n            \t\t\t\t<Column field='id' expander/>\n        \t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n        \t\t\t\t\t<Column field='name' header={lists} body={this.listsTemplate} style={{width: '70%' }} />\n        \t\t\t\t\t<Column field='votes' header={votes} />\n        \t\t\t\t\t<Column field='percent' header='%' style={{width:'8%'}} />\n        \t\t\t\t</DataTable>\n        \telse {\n    \t\t\tlet columns = []\n    \t\t\tfor (let i = 0; i< this.state.votes.length; i++) {\n    \t\t\t\tlet options = { hour: 'numeric', minute: 'numeric' }\n    \t\t\t\tlet header = <FormattedMessage id='app.tab.ballots.hours' defaultMessage='% hours {0}' values={{0: new Date(this.state.votes[i].affluence).toLocaleTimeString(language, options)}} />\n    \t\t\t\tcolumns.push(<Column key={'percent-columns-' + i} field={'percent'+i} header={header} style={{width:'10%'}} />)\n    \t\t\t}\n    \t\t\tdataTable = <DataTable value={value} sortField='votes' sortOrder={-1}\n\t\t\t \t\t\tscrollable={true} scrollHeight='450px' footer={footer}\n\t\t\t \t\t\texpandedRows={this.state.expandedRows} \n\t\t\t \t\t\tonRowToggle={(e) => this.setState({expandedRows:e.data})}\n\t\t\t \t\t\trowExpansionTemplate={this.rowExpansionTemplate}\n\t\t\t \t\t\tclassName='little-table'>\n\t\t\t\t\t\t\t<Column field='id' expander style={{width:'6%'}} />\n\t\t\t\t\t\t\t<Column field='image' body={this.partyTemplate} style={{width:'10%'}} />\n\t\t\t\t\t\t\t<Column field='name' header={lists} style={{width: '50%' }} />\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</DataTable>\n        \t}\n        }\n    \treturn dataTable\n\t}\n\n    render() {\n    \tlet realTimeVotingPapers = ''\n    \tlet realTimeVotes = ''\n    \tlet progressSpinner = ''\n    \tif (!this.state.votes)\n    \t\tprogressSpinner = <ProgressSpinner/>\n\t    if (!history) {\n    \t\trealTimeVotingPapers = <SockJsClient url={process.env.REACT_APP_VOTING_PAPERS_REALTIME_URL} topics={['/topic/votingpaper']}\n    \t\t\t\t\t\t\t\t\tonMessage={(msg) => {\n        \t            \t\t\t\t\tthis.setState({\n        \t            \t\t\t\t\t\tvotingPaper: msg.votingPapers.filter(((e) => e.id === this.state.votingPaper.id))[0]\n        \t            \t\t\t\t\t})\n    \t\t\t\t\t\t\t   }} />\n\t        realTimeVotes = <SockJsClient url={process.env.REACT_APP_VOTING_REALTIME_URL} topics={['/topic/vote']}\n\t            \t\t\t\tonMessage={(msg) => {\n\t            \t\t\t\t\tthis.setState({\n\t            \t\t\t\t\t\tvotes: msg.votings\n\t            \t\t\t\t\t})\n\t            \t\t\t}} />\n        }\n        return (\n        \t<div className='tableContent'>\n        \t\t{progressSpinner}\n        \t\t{realTimeVotingPapers}\n    \t\t\t{realTimeVotes}\n        \t\t<div id='headEnti'>\n        \t\t\t<h3>{getTitle(this.state.zone)}</h3>\n        \t\t</div>\n            \t{this.renderDataTable()}\n            \t<Dialog visible={this.state.showCandidates} \n        \t\t\tmodal={true} onHide={() => this.setState({showCandidates: false})}\n        \t\t\tstyle={{width: '50vw'}} header={this.renderModalHeader()}>\n        \t\t\t<Candidates zone={this.state.zone} party={this.state.selectedParty} \n        \t\t\t\tvotes={this.state.votes} app={this.props.app} />\n        \t\t</Dialog>\n            </div>\n        )\n    }\n}\n\nexport default Little","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport './App.css'\nimport { TabMenu } from 'primereact/tabmenu'\nimport 'primeflex/primeflex.css'\nimport VoteMap from './map/VoteMap';\nimport Littlenogroup from './results/Littlenogroup';\nimport Biggerpartygroup from './results/Biggerpartygroup';\nimport Bigger from './results/Bigger';\nimport Little from './results/Little';\nimport { getTabs, getVotingPaperById } from './Utilities';\nimport 'primereact/resources/themes/nova-light/theme.css'\nimport 'primereact/resources/primereact.min.css'\nimport 'primeicons/primeicons.css'\nimport logo from './images/logo.ico'\nimport {history, language} from './index'\n\nexport var config\n\nclass App extends Component {\n\n    constructor(data) {\n        super(data)\n        config = data.config\n        let activeItem = {}\n        if (config.votingPapers && config.votingPapers[0])\n        \tactiveItem = { id: config.votingPapers[0].id, label: config.votingPapers[0].name }\n        this.state = {\n            items: [\n                ],\n            tabvotes: [\n            \t{ id: 0, label: <FormattedMessage id='app.tab.ballots' defaultMessage='BALLOTS' /> },\n            \t{ id: 1, label: <FormattedMessage id='app.tab.voters' defaultMessage='VOTERS' /> }\n                ],\n            activeItem: activeItem,\n            activeTabVote: { id: 0, label: <FormattedMessage id='app.tab.ballots' defaultMessage='BALLOTS' /> },\n        }\n        config.votingPapers.map((votingPaper) => \n        \t\tthis.state.items.push({ id: votingPaper.id, label: votingPaper.name })\n        )\n    }\n\n    componentDidMount() {\n\t\tconst tabs = getTabs(this, '.vote-tabmenu')\n\t\tif (tabs && tabs[0]) {\n\t\t\ttabs[0].click()\n\t\t\tif (history) {\n\t\t\t\tconst tabvotes = getTabs(this, '.vote-tabvotes')\n\t\t\t\ttabvotes[0].click()\n\t\t\t}\n\t\t}\n    }\n\n    render() {\n    \tlet results = ''\n    \tlet ballots = ''\n        if (this.state.votingPaper) {\n        \tif (this.state.votingPaper.type === 'bigger-partygroup')\n        \t\tresults = <Biggerpartygroup ref='results' votingPaper={this.state.votingPaper} app={this} />\n        \telse if (this.state.votingPaper.type === 'little')\n        \t\tresults = <Little ref='results' votingPaper={this.state.votingPaper} app={this} />\n        \telse if (this.state.votingPaper.type === 'bigger')\n        \t\tresults = <Bigger ref='results' votingPaper={this.state.votingPaper} app={this} />\n        \telse if (this.state.votingPaper.type === 'little-nogroup')\n        \t\tresults = <Littlenogroup ref='results' votingPaper={this.state.votingPaper} app={this} />\n        }\n    \tlet subtitle = ''\n    \tif (history) {\n    \t\tlet options = { year: 'numeric', month: 'long', day: 'numeric' }\n    \t\tsubtitle = <FormattedMessage\n\t\t\t\t\t\t\tid='app.subtitle'\n\t\t\t\t\t\t\tvalues = {{0: new Date(history).toLocaleDateString(language, options)}}\n\t\t\t\t\t\t\tdefaultMessage=' for {0}' />\n\t\t\tballots = <TabMenu ref='tabVotes' className='vote-tabvotes' model={this.state.tabvotes} activeItem={this.state.activeTabVote} onTabChange={(e) => {\n            \t\tthis.setState({ activeTabVote: e.value })\n            \t\tthis.refs.voteMap.reset()\n            \t\tif (this.refs.results)\n            \t\t\tthis.refs.results.reset()\n            \t\t}\n            \t} />\n    \t}\n\t\treturn (\n            <div className='html navbar-is-fixed-top cbp-spmenu-push excludeIE10 enhanced'>\n            \t<div className='content-section implementation'>\n                \t<div className='second-row'>\n        \t\t\t\t<div className='container container-live'>\n                     \t\t<div className='box-live'>\n                     \t\t\t<div className='img-responsive inmlive' />\n                     \t\t</div>\n                     \t\t<div className='box-title'>\n                     \t\t\t<FormattedMessage\n                     \t\t\t\tid='app.title'\n                     \t\t\t\tdefaultMessage='Affluence and Results'>\n                     \t\t\t\t\t{(title) => <p><strong>{title}{subtitle}</strong></p>}\n                     \t\t\t</FormattedMessage>\n                     \t\t</div>\n                     \t\t<div className='powered'>\n                     \t\t\t<img alt='logo' className='logo' src={logo} />\n             \t\t\t\t\t<FormattedMessage\n             \t\t\t\t\tid='app.powered'\n             \t\t\t\t\t\tdefaultMessage='Powered by'>\n         \t\t\t\t\t\t\t{(title) => <p>{title} <a href='http://www.vige.it'>Vige</a></p>}\n         \t\t\t\t\t\t\t</FormattedMessage>\n         \t\t\t\t\t</div>\n                     \t</div>\n                    </div>\n                \t<TabMenu ref='tabMenu' className='vote-tabmenu' model={this.state.items} activeItem={this.state.activeItem} onTabChange={(e) => {\n                \t\tthis.setState({ activeItem: e.value,\n                \t\t\t\t\tvotingPaper: getVotingPaperById(e.value) })\n                \t\tthis.refs.voteMap.reset()\n                \t\tif (this.refs.results)\n                \t\t\tthis.refs.results.reset()\n                \t\t}\n                \t} />\n                \n                \t{ballots}\n                \t\n                    <div className='my-content p-grid'>\n                        <div className='p-col-fixed' style={{ width: '360px', paddingRight: '40px' }}>\n                        \t<VoteMap ref='voteMap' votingPaper={this.state.votingPaper} app={this} />\n                        </div>\n                        <div className='p-col'>\n                            {results}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport './ErrorBoundary.css'\n\nclass ErrorBoundary extends React.Component {\n  \n  render() {\n      // Error path\n\t  return (\n        <div className='error-boundary'>\n          <h2><FormattedMessage\n          \t\tid='app.error'\n          \t\tdefaultMessage='Something went wrong.' />\n          </h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.props.error && this.props.error.toString()}\n            <br />\n            {this.props.errorInfo.componentStack}\n          </details>\n        </div>\n      )\n  }  \n}\n\nexport default ErrorBoundary","import React from 'react'\n\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {IntlProvider, addLocaleData} from 'react-intl'\nimport * as serviceWorker from './serviceWorker'\nimport locale_en from 'react-intl/locale-data/en'\nimport locale_it from 'react-intl/locale-data/it'\nimport messages_it from './translations/it.json'\nimport axios from 'axios'\nimport {ProgressSpinner} from 'primereact/progressspinner'\nimport ErrorBoundary from './errors/ErrorBoundary'\n\naddLocaleData([...locale_en, ...locale_it])\n\nconst messages = {\n    'it': messages_it\n}\n\nexport const language = navigator.language.split(/[-_]/)[0]  // language without region code\nexport var history = ''\nexport var locations = ''\n\nlet voting_papers_url = process.env.REACT_APP_VOTING_PAPERS_URL\nlet cities_generator_url = process.env.REACT_APP_CITIES_GENERATOR_URL\nif (window.location.search.startsWith('?date=')) {\n\thistory = window.location.search.split('=')[1]\n\tvoting_papers_url = process.env.REACT_APP_HISTORY_VOTING_PAPERS_URL + '/' + history\n}\nReactDOM.render(<ProgressSpinner/>, document.getElementById('root'))\naxios\n\t.get(voting_papers_url)\n\t.then(function(papers) {\n\t\taxios\n\t\t\t.get(cities_generator_url)\n\t\t\t.then(function (cities) {\n\t\t\t\tlocations = cities.data\n\t    \t\tReactDOM.render(<IntlProvider locale={language} messages={messages[language]}><App config={papers.data} /></IntlProvider>, document.getElementById('root'))\n\t    \t\t// If you want your app to work offline and load faster, you can change\n\t    \t\t// unregister() to register() below. Note this comes with some pitfalls.\n\t    \t\t// Learn more about service workers: http://bit.ly/CRA-PWA\n\t\t\t\tserviceWorker.register()\n\t\t\t})\n\t})\n\t.catch(function(error) {\n\t\tReactDOM.render(<IntlProvider locale={language} messages={messages[language]}><ErrorBoundary error={error} errorInfo={error}/></IntlProvider>, document.getElementById('root'))\n\t    console.log(error)\n\t})\n","module.exports = __webpack_public_path__ + \"static/media/logo.71fca57e.ico\";"],"sourceRoot":""}